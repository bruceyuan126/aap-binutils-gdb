cris.cpu:    (or (and (sll tmpb 16) #xffff0000)
epiphany.cpu:			      (sll USI expcause0bit (const 16)))
epiphany.cpu:			      (sll USI coreCfgResBit16 (const 16)))))))) ;config reg
epiphany.cpu:			  (sll SI imm16 (const 16)))) ; replacing just high bits
fr30.cpu:     ((value pc) (or  WI value (sll WI (const -1) (const 4))))
fr30.cpu:		(set (ifield f-i20) (or (sll (ifield f-i20-4) (const 16))
frv.cpu:			       (sll newval 16))))
frv.cpu:					   (sll newval 8)))))
frv.cpu:					   (sll newval 16)))))
iq10.cpu:     (set rt-rs (and rt-rs (or (sll hi16 16) #xFFFF)))
iq10.cpu:     (set rt (or rs (sll hi16 16)))
iq10.cpu:     (set rt-rs (or rt-rs (sll hi16 16)))
iq2000.cpu:     ((value pc) (or USI (and USI pc #xF0000000) (sll USI value 2))))
iq2000.cpu:     ((value pc) (or SI (and SI pc #xF0000000) (sll SI value 2))))
iq2000.cpu:     ((value pc) (add SI (sll SI value 2) (add pc 4))))
iq2000.cpu:  (and value (sll 1 bit-num)))
iq2000.cpu:	       (set rd-rs (or SI (sll SI high 16) low)))
iq2000.cpu:	       (set rd (or SI (sll SI high 16) low)))
iq2000.cpu:	       (set rd (and rd (sll #xFFFFFFFF maskr))))
iq2000.cpu:(dni sll "shift left logical" (USES-RD USES-RT)
iq2000.cpu:     "sll $rd,$rt,$shamt"
iq2000.cpu:     (set rd (sll rt shamt))
iq2000.cpu:(dni sllv2 "shift left logical variable" (ALIAS NO-DIS USES-RD USES-RS USES-RT)
iq2000.cpu:     "sllv ${rd-rt},$rs"
iq2000.cpu:     (set rd-rt (sll rd-rt (and rs #x1F)))
iq2000.cpu:(dni sllv "shift left logical variable" (USES-RD USES-RS USES-RT)
iq2000.cpu:     "sllv $rd,$rt,$rs"
iq2000.cpu:     (set rd (sll rt (and rs #x1F)))
iq2000.cpu:     (set rd-rt (and (sll rd-rt shamt) (srl #xFFFFFFFF rs)))
iq2000.cpu:     (set rd (and (sll rt shamt) (srl #xFFFFFFFF rs)))
iq2000.cpu:     (set rd-rt (and (srl rd-rt shamt) (sll #xFFFFFFFF rs)))
iq2000.cpu:     (set rd (and (srl rt shamt) (sll #xFFFFFFFF rs)))
iq2000.cpu:;	       (set word (srl word (sll (and addr 2) 3)))
iq2000.cpu:;	       (set rt (srl word (sll (and addr 2) 3))))
iq2000.cpu:;	       (set word (srl word (sll (and addr 1) 4)))
iq2000.cpu:;	       (set rt (srl word (sll (and addr 1) 4))))
iq2000.cpu:     (set rt (sll hi16 16))
iq2000.cpu:      (emit sll (rd 0) (rt 0) (shamt 0))
iq2000.cpu:(dnmi m-sll "shift left logical" (USES-RD USES-RT USES-RS NO-DIS)
iq2000.cpu:      "sll $rd,$rt,$rs"
iq2000.cpu:      (emit sllv rd rt rs)
iq2000m.cpu:     (set rt (and rs (or (sll hi16 16) #xFFFF)))
iq2000m.cpu:     (set rt-rs (and rt-rs (or (sll hi16 16) #xFFFF)))
iq2000m.cpu:     (set rt-rs (or rt-rs (sll hi16 16)))
iq2000m.cpu:     (set rt (or rs (sll hi16 16)))
lm32.cpu:        ((value pc) (add SI pc (sra SI (sll SI value 16) 14)))
lm32.cpu:        ((value pc) (add SI pc (sra SI (sll SI value 6) 4)))
lm32.cpu:        (set r1 (and r0 (sll SI hi16 16)))
lm32.cpu:        (set r1 (or r0 (sll SI hi16 16)))
lm32.cpu:        (set r2 (sll SI r0 r1))
lm32.cpu:        (set r1 (sll SI r0 imm))
lm32.cpu:        (set r1 (or r0 (sll SI hi16 16)))
lm32.cpu:        (set r1 (or r0 (sll SI gotoffhi16 16)))
