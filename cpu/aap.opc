/* This file is for aap.cpu.  

   Language is C.

   Each section is delimited with start and end markers.

   <arch>-opc.h additions use: "-- opc.h"
   <arch>-opc.c additions use: "-- opc.c"
   <arch>-asm.c additions use: "-- asm.c"
   <arch>-dis.c additions use: "-- dis.c"
   <arch>-ibd.h additions use: "-- ibd.h".  */

/* -- opc.h */
#undef CGEN_DIS_HASH_SIZE
#define CGEN_DIS_HASH_SIZE 128
#undef CGEN_DIS_HASH
#define CGEN_DIS_HASH(buf, value) 0

/* Allows reason codes to be output when assembler errors occur. */
#define CGEN_VERBOSE_ASSEMBLER_ERRORS

//#include "../cpu/aap_ifield.h"
/* -- */

/* -- opc.c */
#include "elf/aap.h"
#include <stdio.h>
/* -- */

/* -- asm.c */

#include "elf/aap.h"

static const char * parse_branch_and_link (CGEN_CPU_DESC, const char **, int, long int*);
static const char * parse_branch_and_link32 (CGEN_CPU_DESC, const char **, int, long int*);
static const char * parse_bra (CGEN_CPU_DESC, const char **, int, long int *);
static const char * parse_bra32 (CGEN_CPU_DESC, const char **, int, long int *);
static const char * parse_branch_cond (CGEN_CPU_DESC, const char **, int, long int *);
static const char * parse_branch_cond32 (CGEN_CPU_DESC, const char **, int, long int *);
static const char * parse_move_immi (CGEN_CPU_DESC, const char **, int, long int *);
static const char * parse_move_immi32 (CGEN_CPU_DESC, const char **, int, long int *);

static const char *
parse_branch_and_link (CGEN_CPU_DESC cd,
	      	      const char ** strp,
	      	      int opindex,
	      	      long int * valuep)
{
  printf("parse_branch_and_link\n");
  
  const char *errmsg = NULL;
  enum cgen_parse_operand_result result_type;
  
  errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_AAP_BAL16,
  	  		     & result_type, valuep);

  return errmsg;
}

static const char *
parse_branch_and_link32 (CGEN_CPU_DESC cd,
	      		const char ** strp,
	      		int opindex,
	      		long int * valuep)
{
  printf("parse_branch_and_link32\n");
  
  const char *errmsg = NULL;
  enum cgen_parse_operand_result result_type;
  
  errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_AAP_BAL32,
  	  		     & result_type, valuep);

  return errmsg;
}

static const char *
parse_bra (CGEN_CPU_DESC cd,
	  const char ** strp,
	  int opindex,
	  long int * valuep)
{
  printf("parse_bra\n");
  
  const char *errmsg = NULL;
  enum cgen_parse_operand_result result_type;
  
  errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_AAP_BR16,
  	  		     & result_type, valuep);

  return errmsg;
}

static const char *
parse_bra32(CGEN_CPU_DESC cd,
	      const char ** strp,
	      int opindex,
	      long int * valuep)
{
  printf("parse_bra32\n");
  
  const char *errmsg = NULL;
  enum cgen_parse_operand_result result_type;
  
  errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_AAP_BR32,
  	  		     & result_type, valuep);

  return errmsg;
}

static const char *
parse_branch_cond(CGEN_CPU_DESC cd,
	      const char ** strp,
	      int opindex,
	      long int * valuep)
{
  printf("parse_branch_cond\n");
  
  const char *errmsg = NULL;
  enum cgen_parse_operand_result result_type;
  
  errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_AAP_BRCC16,
  	  		     & result_type, valuep);

  return errmsg;
}

static const char *
parse_branch_cond32(CGEN_CPU_DESC cd,
	      	    const char ** strp,
	      	    int opindex,
	      	    long int * valuep)
{
  printf("parse_branch_cond32\n");
  
  const char *errmsg = NULL;
  enum cgen_parse_operand_result result_type;
  
  errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_AAP_BRCC32,
  	  		     & result_type, valuep);

  return errmsg;
}

static const char *
parse_move_immi(CGEN_CPU_DESC cd,
	      const char ** strp,
	      int opindex,
	      long int * valuep)
{
  printf("parse_move_immi\n");
  
  const char *errmsg = NULL;
  enum cgen_parse_operand_result result_type;
  
  errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_AAP_BR16,
  	  		     & result_type, valuep);

  return errmsg;
}

static const char *
parse_move_immi32(CGEN_CPU_DESC cd,
	      const char ** strp,
	      int opindex,
	      long int * valuep)
{
  printf("parse_move_immi32\n");
  
  const char *errmsg = NULL;
  enum cgen_parse_operand_result result_type;
  
  errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_AAP_BR32,
  	  		     & result_type, valuep);

  return errmsg;
}

/* -- */

/* -- dis.c */

#include "elf/aap.h"
#include "elf-bfd.h"

#define CGEN_PRINT_NORMAL(cd, info, value, attrs, pc, length)
#define CGEN_PRINT_ADDRESS(cd, info, value, attrs, pc, length)
#define CGEN_BFD_ARCH bfd_arch_aap	

print_insn_aap(bfd_vma pc, disassemble_info *info);

static void
print_6bit_reg(CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,
		 void * dis_info,
		 long int value,
		 bfd_vma pc ATTRIBUTE_UNUSED,
		 int length)
{
  printf("value: %d, length: %d\n", value, length);

  disassemble_info *info = (disassemble_info *) dis_info;
  (*info->fprintf_func) (info->stream, "$r");
}

/* -- */

/* -- ibd.h */
/* -- */