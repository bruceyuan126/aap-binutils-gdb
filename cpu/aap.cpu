;; AAP cpu definition
;;

(include "simplify.inc")

;;
;; define-architure must appear first
;;
(define-arch
  (name aap)		;; name of cpu architecture
  (comment "AAP")
  (insn-lsb0? #t)	;; is bit 0 the msb or lsb? It is lsb true.
  (machs aap:a16 aap:a32)	;; list of machines
  (isas aap16 aap32)  		;; isa name
)

;;
;; ISA
;;
(define-isa	;;requires the same default
  (name aap16)
  (default-insn-word-bitsize 32)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
)
(define-isa	;;fetches 1 insn at a time & does not execute in parallel. 
  (name aap32)
  (default-insn-word-bitsize 32)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
)

;;
;; Cpu names must be distinct from the architecture name and machine names.
;; The "b" suffix stands for "base" and is the convention.
;; The "f" suffix stands for "family" and is the convention.
;;
(define-cpu
  (name aapbf)
  (comment "AAP base family")
  (insn-endian little)
  (data-endian little)
  (word-bitsize 32)
  (insn-chunk-bitsize 32)
)

;;
;; Machines
;;
(define-mach	;;bfd name = bfd-aap
  (name aap:a16)
  (comment "16 bit AAP machine")
  (cpu aapbf)
  (isas aap16)
)
(define-mach	;;bfd name = bfd-aap
  (name aap:a32)
  (comment "32 bit AAP machine")
  (cpu aapbf)
  (bfd-name "aap")
  (isas aap32)
)

;;
;; Models
;;
(define-model
  (name aap16)
  (comment "16 bit AAP model")
  (mach aap16)
  
  (unit u-exec "Execution Unit" ()
    1 1 ;; issue done
    () ;; state
    () ;; inputs
    () ;; outputs
    () ;; profile action (default)
    )
)
(define-model
  (name aap32)
  (comment "32 bit AAP model")
  (mach aap32)
  
  (unit u-exec "Execution Unit" ()
    1 1 ;; issue done
    () ;; state
    () ;; inputs
    () ;; outputs
    () ;; profile action (default)
    )
)

;;
;; Attributes
;;
(define-pmacro all-isas  () (ISA aap16 aap32))
(define-pmacro all-machs () (MACH aap:a16 aap:a32))

;;
;; General Purpose Registers
;;
;; AAP has between 4 and 64 16 bit general purpose registers

(define-keyword
  (name gpr-names)
  (print-name h-gpr)
  (prefix "")
  (values
   ($r0   0)($r1   1)($r2   2)($r3   3)($r4   4)($r5   5)($r6   6)($r7   7)
   ($r8   8)($r9   9)($r10 10)($r11 11)($r12 12)($r13 13)($r14 14)($r15 15)
   ($r16 16)($r17 17)($r18 18)($r19 19)($r20 20)($r21 21)($r22 22)($r23 23)
   ($r24 24)($r25 25)($r26 26)($r27 27)($r28 28)($r29 29)($r30 30)($r31 31)
   ($r32 32)($r33 33)($r34 34)($r35 35)($r36 36)($r37 37)($r38 38)($r39 39)
   ($r40 40)($r41 41)($r42 42)($r43 43)($r44 44)($r45 45)($r46 46)($r47 47)
   ($r48 48)($r49 49)($r50 50)($r51 51)($r52 52)($r53 53)($r54 54)($r55 55)
   ($r56 56)($r57 57)($r58 58)($r59 59)($r60 60)($r61 61)($r62 62)($r63 63)
  )
)

(define-hardware
  (name h-gpr)
  (comment "General Purpose Registers")
  (attrs all-isas all-machs)
  (type register DI (64))
  (indices extern-keyword gpr-names)
  (get (index) (c-call DI "@cpu@_h_gpr_get_handler" index))
  (set (index newval) (c-call VOID "@cpu@_h_gpr_set_handler" index newval))
)

;; Control registers - don't think there are any
;(define-keyword
;  (name cr-names)
;  (print-name h-cr)
;  (prefix "")
;  (values (cr0   0) (cr1   1) (cr2   2) (cr3   3)
;          (cr4   4) (cr5   5) (cr6   6) (cr7   7)
;          (cr8   8) (cr9   9) (cr10 10) (cr11 11)
;          (cr12 12) (cr13 13) (cr14 14) (cr15 15))
;)
;
;(define-hardware
;  (name h-cr)
;  (comment "control registers")
;  (attrs all-isas all-machs)
;  (type register UWI (16)) ;FIX: are the control reg really 16bits?
;  (indices extern-keyword cr-names)
;) 

;; Can allow special registers and flash
;; No delay slots

;; 32 bit register, top 8 bits is status, rest is PC   ;;FIX ME: PC & CF are part of the same reg
(define-hardware
  (name h-cf)
  (comment "carry flag")
  (attrs all-isas all-machs)
  (type register BI)
)

(define-hardware
  (name h-pc)
  (comment "program counter")
  (attrs PC all-isas all-machs)
  (type pc USI)
  (get () (raw-reg h-pc))
  (set (newval) (set (raw-reg h-pc) newval))
)

;;
;; Instruction fields
;;
;; 15..................0 31.................16 
;; 0 00 0000 000 000 000 0 CC OOOO DDD AAA BBB
;; 0 00 0000 000 000 000 0 CC OOOO DDD AAA III
;; 0 00 0000 000 000 000 0 CC OOOO SSS AAA BBB
;; 0 00 0000 000 000 000 0 CC OOOO DDD AAA SSS
;; 0 00 0000 000 000 000 0 CC OOOO DDD III III
;; 0 00 0000 000 000 000 0 CC OOOO SSS SSS BBB
;; 0 00 0000 000 000 000 0 CC OOOO SSS SSS SSS
;;
;; 1 CC OOOO DDD AAA BBB 0 CC OOOO DDD AAA BBB
;; 1 CC OOOO DDD AAA III 0 CC OOOO DDD AAA III
;; 1 CC OOOO DDD AAA III 0 CC III1 DDD AAA III (removed)
;; 1 CC OOOO DDD AAA III 0 CC IIII DDD AAA III
;; 1 CC OOOO SSS AAA BBB 0 CC SSSS SSS AAA BBB

;; 1 CC OOOO DDD AAA SSS 0 CC SSSS DDD AAA SSS
;; 1 CC OOOO DDD III III 0 CC OOOO DDD III III
;; 1 CC OOOO DDD III III 0 CC IIII DDD III III
;; 1 CC OOOO SSS SSS BBB 0 CC SSSS SSS SSS BBB
;; 1 CC OOOO SSS SSS SSS 0 CC SSSS SSS SSS SSS

;;    name           comment       macro  start length   (mode: UINT)
(dnf f-length      "length"      (all-isas) 15  1)
(dnf f-x-length    "x-length"    (all-isas) 31  1)

(dnf f-x-class     "x-class"     (all-isas) 30  2)
(dnf f-opcode      "opcode"      (all-isas) 14  6)
(dnf f-x-opcode    "x-opcode"    (all-isas) 30  6)
(dnf f-class-1     "class"       (all-isas) 25  1)

(dnf f-dst-hi      "dst-hi"      (all-isas) 24  3)
(dnf f-dst-lo      "dst-lo"      (all-isas)  8  3)
(dnf f-x-dst-reg   "x-dst-reg"   (all-isas)  8  3)

(dnf f-src-1-hi    "src-1-hi"    (all-isas) 21  3)
(dnf f-src-1-lo    "src-1-lo"    (all-isas)  5  3)
(dnf f-x-src-reg-1 "x-src-reg-1" (all-isas)  5  3)

(dnf f-src-2-hi    "src-2-hi"    (all-isas) 18  3)
(dnf f-src-2-lo    "src-2-lo"    (all-isas)  2  3)
(dnf f-x-src-reg-2 "x-src-reg-2" (all-isas)  2  3)

(df f-uint-18-3-hi "uint-18-3-hi" (all-isas) 18 3 UINT #f #f)
(df f-uint-21-6    "uint-21-6"    (all-isas) 21 6 UINT #f #f)
(df f-uint-28-4    "uint-28-4"    (all-isas) 28 4 UINT #f #f)
(df f-uint-28-3    "uint-28-3"    (all-isas) 28 3 UINT #f #f)
(df f-uint-2-3     "uint-2-3"     (all-isas)  2 3 UINT #f #f)
(df f-uint-2-3-lo  "uint-2-3-lo"  (all-isas)  2 3 UINT #f #f)
(df f-uint-5-6     "uint-5-6"     (all-isas)  5 6 UINT #f #f)

(df f-int-18-3     "int-18-3"     (all-isas) 18  3 INT #f #f)
(df f-int-24-9     "int-24-9"     (all-isas) 24  9 INT #f #f)
(df f-int-24-6     "int-24-6"     (all-isas) 24  6 INT #f #f)
(df f-int-24-3     "int-24-3"     (all-isas) 24  3 INT #f #f)
(df f-int-28-4-lo  "int-28-4-lo"  (all-isas) 28  4 INT #f #f)
(df f-int-2-3      "int-2-3"      (all-isas)  2  3 INT #f #f)
(df f-int-8-3      "int-8-3"      (all-isas)  8  3 INT #f #f)
(df f-int-8-6      "int-8-6"      (all-isas)  8  6 INT #f #f)
(df f-int-8-9      "int-8-9"      (all-isas)  8  9 INT #f #f)
(df f-int-12-7     "int-12-7"     (all-isas) 12  7 INT #f #f)
(df f-int-12-10    "int-12-10"    (all-isas) 12 10 INT #f #f)
(df f-int-12-13    "int-12-13"    (all-isas) 12 13 INT #f #f)

;; for reloc testing
;(df f-u16          "16 bit unsigned" (all-isas) 15 16 UINT #f #f)

;; carry flag
(dnf f-carry       "carry flag"   (all-isas)  0  1)

;; d+1
(dnf f-dst+1-reg   "R(d+1)"       (all-isas) 24  6)

;;
;; multi-ifields
;;
(define-multi-ifield
  (name f-s-13)
  (comment "sint 13bit")
  (attrs all-isas)
  (mode SI)
  (subfields f-int-28-4-lo f-int-8-9)
  (insert (sequence ()
    (set (ifield f-int-28-4-lo) (and (srl (ifield f-s-13) 9) #x1f))
    (set (ifield f-int-8-9) (and (srl (ifield f-s-13) 0) #x3ff)))
  )
  (extract (sequence ()
    (set (ifield f-s-13)
      (or (sll (ifield f-int-28-4-lo) 9)
          (sll (ifield f-int-8-9) 0))))
  )
)
(define-multi-ifield
  (name f-s-10)
  (comment "sint 10bit")
  (attrs all-isas)
  (mode SI)
  (subfields f-int-28-4-lo f-int-8-6)
  (insert (sequence ()
    (set (ifield f-int-28-4-lo) (and (srl (ifield f-s-10) 6) #x1f))
    (set (ifield f-int-8-6) (and (srl (ifield f-s-10) 0) #x7f)))
  )
  (extract (sequence ()
    (set (ifield f-s-10)
      (or (sll (ifield f-int-28-4-lo) 6)
          (sll (ifield f-int-8-6) 0))))
  )
)
(define-multi-ifield
  (name f-s-7)
  (comment "sint 7bit")
  (attrs all-isas)
  (mode SI)
  (subfields f-int-28-4-lo f-int-8-3)
  (insert (sequence ()
    (set (ifield f-int-28-4-lo) (and (srl (ifield f-s-7) 3) #x1f))
    (set (ifield f-int-8-3) (and (srl (ifield f-s-7) 0) #x7)))
  )
  (extract (sequence ()
    (set (ifield f-s-7)
      (or (sll (ifield f-int-28-4-lo) 3)
          (sll (ifield f-int-8-3) 0))))
  )
;  (encode (value pc) (sequence SI ()
;    (set SI f-int-8-3 (c-raw-call SI "findHiS7" value))
;    (set SI f-int-28-4-lo (c-raw-call SI "findLoS7" value)))
;  )
;  (decode (value pc)
;    (set SI value (c-raw-call SI "decodeS7" value f-int-28-4-lo f-int-8-3))
;  )
)
(define-multi-ifield
  (name f-s-7-13)
  (comment "sint 7bit")
  (attrs all-isas)
  (mode SI)
  (subfields f-int-28-4-lo f-int-2-3)
  (insert (sequence ()
    (set (ifield f-int-28-4-lo) (and (srl (ifield f-s-7-13) 3) #x1f))
    (set (ifield f-int-2-3) (and (srl (ifield f-s-7-13) 0) #x7)))
  )
  (extract (sequence ()
    (set (ifield f-s-7-13)
      (or (sll (ifield f-int-28-4-lo) 3)
          (sll (ifield f-int-2-3) 0))))
  )
)
(define-multi-ifield
  (name f-s-22)
  (comment "sint 22bit format-17")
  (attrs all-isas)
  (mode SI)
  (subfields f-int-24-9 f-s-13)  ;f-int-28-4-lo f-int-8-9
  (insert (sequence ()
    (set (ifield f-int-24-9) (and (srl (ifield f-s-22) 13) #x1f))
    (set (ifield f-s-13) (and (srl (ifield f-s-22) 0) #x3fff)))
  )
  (extract (sequence ()
    (set (ifield f-s-22)
      (or (sll (ifield f-int-24-9) 13)
          (sll (ifield f-s-13) 0))))
  )
;  (encode (value pc) (sequence SI ()
;    (set SI f-int-8-9     (c-raw-call SI "findLoS22" value))
;    (set SI f-int-24-9    (c-raw-call SI "findMidS22" value))
;    (set SI f-int-28-4-lo (c-raw-call SI "findHiS22" value)))
;  )
;  (decode (value pc)
;    (set SI value (c-raw-call SI "decodeS22" value f-int-8-9 f-int-24-9 f-int-28-4-lo))
;  )
)
(define-multi-ifield
  (name f-s-16)
  (comment "sint 16bit format-16")
  (attrs all-isas)
  (mode SI)
  (subfields f-int-24-6 f-s-10)
  (insert (sequence ()
    (set (ifield f-int-24-6) (and (srl (ifield f-s-16) 10) #x7f))
    (set (ifield f-s-10) (and (srl (ifield f-s-16) 0) #x7ff)))
  )
  (extract (sequence ()
    (set (ifield f-s-16)
      (or (sll (ifield f-int-24-6) 10)
          (sll (ifield f-s-10) 0))))
  )
;  (encode (value pc) (sequence SI ()
;    (set SI f-int-8-6     (c-raw-call SI "findLoS16" value))
;    (set SI f-int-24-6    (c-raw-call SI "findMidS16" value))
;    (set SI f-int-28-4-lo (c-raw-call SI "findHiS16" value)))
;  )
;  (decode (value pc)
;    (set SI value (c-raw-call SI "decodeS16" value f-int-8-6 f-int-24-6 f-int-28-4-lo))
;  )
)
(define-multi-ifield
  (name f-s-10-fin)
  (comment "sint 10bit format-12")
  (attrs all-isas)
  (mode SI)
  (subfields f-int-24-3 f-s-7)
  (insert (sequence ()
    (set (ifield f-int-24-3) (and (srl (ifield f-s-10-fin) 7) #x7))
    (set (ifield f-s-7) (and (srl (ifield f-s-10-fin) 0) #xff)))
  )
  (extract (sequence ()
    (set (ifield f-s-10-fin)
      (or (sll (ifield f-int-24-3) 7)
          (sll (ifield f-s-7) 0))))
  )
;  (encode (value pc) (sequence SI ()
;    (set SI f-int-8-3     (c-raw-call SI "findLoS10" value))
;    (set SI f-int-24-3    (c-raw-call SI "findMidS10" value))
;    (set SI f-int-28-4-lo (c-raw-call SI "findHiS10" value)))
;  )
;  (decode (value pc)
;    (set SI value (c-raw-call SI "decodeS10" value f-int-8-3 f-int-24-3 f-int-28-4-lo))
;  )
)
(define-multi-ifield
  (name f-s-form-13)
  (comment "sint 10bit format-13")
  (attrs all-isas)
  (mode SI)
  (subfields f-int-18-3 f-s-7-13)
  (insert (sequence ()
    (set (ifield f-int-18-3) (and (srl (ifield f-s-form-13) 7) #x7))
    (set (ifield f-s-7-13) (and (srl (ifield f-s-form-13) 0) #xff)))
  )
  (extract (sequence ()
    (set (ifield f-s-form-13)
      (or (sll (ifield f-int-18-3) 7)
          (sll (ifield f-s-7-13) 0))))
  )
;  (encode (value pc) (sequence SI ()
;    (set SI f-int-2-3     (c-raw-call SI "findLoS10" value))
;    (set SI f-int-18-3    (c-raw-call SI "findMidS10" value))
;    (set SI f-int-28-4-lo (c-raw-call SI "findHiS10" value)))
;  )
;  (decode (value pc)
;    (set SI value (c-raw-call SI "decodeS10" value f-int-8-3 f-int-24-3 f-int-28-4-lo))
;  )
)
(define-multi-ifield
  (name f-i-12)
  (comment "uint 12bit format-14")
  (attrs all-isas)
  (mode USI)
  (subfields f-uint-5-6 f-uint-21-6)
  (insert (sequence ()
    (set (ifield f-uint-21-6) (and (srl (ifield f-i-12) 6) #x7f))
    (set (ifield f-uint-5-6) (and (srl (ifield f-i-12) 0) #x7f)))
  )
  (extract (sequence ()
    (set (ifield f-i-12) (or (sll (ifield f-uint-21-6) 6)
    (sll (ifield f-uint-5-6) 0))))
  )
;  (encode (value pc) (sequence SI ()
;    (set SI f-uint-21-6 (c-raw-call SI "findHi12" value))
;    (set SI f-uint-5-6  (c-raw-call SI "findLo12" value)))
;  )
;  (decode (value pc)
;    (set SI value (c-raw-call SI "decode12" value f-uint-21-6 f-uint-5-6))
;  )
)

(define-multi-ifield
  (name f-i-16)
  (comment "uint 16bit format-14")
  (attrs all-isas)
  (mode USI)
  (subfields f-i-12 f-uint-28-4)
  (insert (sequence ()
    (set (ifield f-uint-28-4) (and (srl (ifield f-i-16) 12) #x1f))
    (set (ifield f-i-12) (and (srl (ifield f-i-16) 0) #x1fff)))
  )
  (extract (sequence ()
    (set (ifield f-i-16)
      (or (sll (ifield f-uint-28-4) 4)
          (sll (ifield f-i-12) 0))))
  )
;  (encode (value pc) (sequence SI ()
;    (set SI f-uint-21-6 (c-raw-call SI "findHi16" value))
;    (set SI f-uint-28-4 (c-raw-call SI "findMid16" value))
;    (set SI f-uint-5-6 (c-raw-call SI "findLo16" value)))
;  )
;  (decode (value pc)
;    (set SI value (c-raw-call SI "decode16" value f-uint-21-6 f-uint-28-4 f-uint-5-6))
;  )
)

(define-multi-ifield
  (name f-i-6)
  (comment "uint 6bit")
  (attrs all-isas)
  (mode USI)
  (subfields f-uint-18-3-hi f-uint-2-3-lo)
  (insert (sequence ()
    (set (ifield f-uint-18-3-hi) (and (srl (ifield f-i-6) 3) #x7))
    (set (ifield f-uint-2-3-lo) (and (srl (ifield f-i-6) 0) #x7)))
  )
  (extract (sequence ()
    (set (ifield f-i-6)
      (or (sll (ifield f-uint-18-3-hi) 3)
          (sll (ifield f-uint-2-3-lo) 0))))
  )
;  (encode (value pc) (sequence USI ()
;    (set USI f-uint-2-3-lo (c-raw-call USI "findLo" value))
;    (set USI f-uint-18-3-hi (c-raw-call USI "findHi" value)))
;  )
;  (decode (value pc)
;    (set USI value (c-raw-call USI "decode6" value f-uint-2-3-lo f-uint-18-3-hi))
;  )
)

(define-multi-ifield
  (name f-i-9)
  (comment "uint 9bit")
  (attrs all-isas)
  (mode USI)
  (subfields f-i-6 f-uint-28-3)
  (insert (sequence ()
    (set (ifield f-uint-28-3) (and (srl (ifield f-i-9) 3) #x7))
    (set (ifield f-i-6) (and (srl (ifield f-i-9) 0) #x7f)))
  )
  (extract (sequence ()
    (set (ifield f-i-9)
      (or (sll (ifield f-uint-28-3) 3)
          (sll (ifield f-i-6) 0))))
  )
;  (encode (value pc) (sequence SI ()
;    (set SI f-uint-28-3 (c-raw-call SI "findHi9" value))
;    (set SI f-uint-18-3-hi (c-raw-call SI "findMid9" value))
;    (set SI f-uint-2-3-lo (c-raw-call SI "findLo9" value)))
;  )
;  (decode (value pc)
;    (set SI value (c-raw-call SI "decode9" value f-uint-2-3-lo f-uint-18-3-hi f-uint-28-3))
;  )
)

(define-multi-ifield
  (name f-i-10)
  (comment "uint 10bit")
  (attrs all-isas)
  (mode USI)
  (subfields f-i-6 f-uint-28-4)
  (insert (sequence ()
    (set (ifield f-uint-28-4) (and (srl (ifield f-i-10) 4) #x1f))
    (set (ifield f-i-6) (and (srl (ifield f-i-10) 0) #x7f)))
  )
  (extract (sequence ()
    (set (ifield f-i-10)
      (or (sll (ifield f-uint-28-4) 4)
          (sll (ifield f-i-6) 0))))
  )
;  (encode (value pc) (sequence SI ()
;    (set SI f-uint-18-3-hi (c-raw-call SI "findMid10" value))
;    (set SI f-uint-28-4 (c-raw-call SI "findHi10" value))
;    (set SI f-uint-2-3-lo (c-raw-call SI "findLo10" value)))
;  )
;  (decode (value pc)
;    (set SI value (c-raw-call SI "decode10" value f-uint-2-3-lo f-uint-28-4 f-uint-18-3-hi))
;  )
)

(define-multi-ifield
  (name f-d-6)
  (comment "register dst")
  (attrs all-isas all-machs)
  (mode SI)
  (subfields f-dst-hi f-dst-lo)
  (insert (sequence ()
    (set (ifield f-dst-hi) (and (srl (ifield f-d-6) 3) #x7))
    (set (ifield f-dst-lo) (and (srl (ifield f-d-6) 0) #x7)))
  )
  (extract (sequence ()
    (set (ifield f-d-6)
      (or (sll (ifield f-dst-hi) 3)
          (sll (ifield f-dst-lo) 0))))
  )
)

(define-multi-ifield
  (name f-a-6)
  (comment "register src1")
  (attrs all-isas all-machs)
  (mode SI)
  (subfields f-src-1-hi f-src-1-lo)
  (insert (sequence ()
    (set (ifield f-src-1-hi) (and (srl (ifield f-a-6) 3) #x7))
    (set (ifield f-src-1-lo) (and (srl (ifield f-a-6) 0) #x7)))
  )
  (extract (sequence ()
    (set (ifield f-a-6)
      (or (sll (ifield f-src-1-hi) 3)
          (sll (ifield f-src-1-lo) 0))))
  )
)

(define-multi-ifield
  (name f-b-6)
  (comment "register src2")
  (attrs all-isas all-machs)
  (mode SI)
  (subfields f-src-2-hi f-src-2-lo)
  (insert (sequence ()
    (set (ifield f-src-2-hi) (and (srl (ifield f-b-6) 3) #x7))
    (set (ifield f-src-2-lo) (and (srl (ifield f-b-6) 0) #x7)))
  )
  (extract (sequence ()
    (set (ifield f-b-6)
      (or (sll (ifield f-src-2-hi) 3)
          (sll (ifield f-src-2-lo) 0))))
  )
)

;;
;; Single Field operands
;;
(define-operand
  (name carry)
  (comment "carry flag")
  (attrs all-isas)
  (type h-cf)
  (index f-carry)
)
;; Registers (type: h-gpr)
(define-operand
  (name d6)
  (comment "d6")
  (attrs all-isas)
  (type h-gpr)
  (index f-d-6)
)
(define-operand
  (name a6)
  (comment "a6")
  (attrs all-isas)
  (type h-gpr)
  (index f-a-6)
)
(define-operand
  (name b6)
  (comment "b6")
  (attrs all-isas)
  (type h-gpr)
  (index f-b-6)
)
(define-operand
  (name xdest)
  (comment "xdest")
  (attrs all-isas)
  (type h-gpr)
  (index f-x-dst-reg)
)
(define-operand
  (name xsrc1)
  (comment "xsrc1")
  (attrs all-isas)
  (type h-gpr)
  (index f-x-src-reg-1)
)
(define-operand
  (name xsrc2)
  (comment "xsrc2")
  (attrs all-isas)
  (type h-gpr)
  (index f-x-src-reg-2)
)
(define-operand
  (name dest1)
  (comment "dest+1")
  (attrs all-isas)
  (type h-gpr)
  (index f-dst+1-reg)
)

;; Numbers unsigned (h-uint)
(define-operand
  (name uint056)
  (comment "uint 5 6")
  (attrs all-isas)
  (type h-uint)
  (mode USI)
  (index f-uint-5-6)
  (handlers (parse "move_immi"))
)
(define-operand
  (name i16)
  (comment "uint 16bit")
  (attrs all-isas)
  (type h-uint)
  (mode USI)
  (index f-i-16)
  (handlers (parse "move_immi32"))
)
(define-operand
  (name uint023)
  (comment "uint 2 3")
  (attrs all-isas)
  (type h-uint)
  (mode USI)
  (index f-uint-2-3)
  (handlers (parse "bra"))
)
(define-operand
  (name i12)
  (comment "12bit uint")
  (attrs all-isas)
  (type h-uint)
  (mode USI)
  (index f-i-12)
  (handlers (parse "bra32"))
)
(define-operand
  (name i10)
  (comment "10bit uint")
  (attrs all-isas)
  (type h-uint)
  (mode USI)
  (index f-i-10)
  (handlers (parse "bra32"))
)
(define-operand
  (name i9)
  (comment "9bit uint")
  (attrs all-isas)
  (type h-uint)
  (mode USI)
  (index f-i-9)
  (handlers (parse "bra32"))
)
(define-operand
  (name i6)
  (comment "6bit uint")
  (attrs all-isas)
  (type h-uint)
  (mode USI)
  (index f-i-6)
)

;; Numbers signed (h-sint)
(define-operand
  (name int1210)
  (comment "int 12 10")
  (type h-sint)
  (mode SI)
  (index f-s-10)
)
(define-operand
  (name int083)
  (comment "int 8 3")
  (attrs all-isas)
  (type h-sint)
  (mode SI)
  (index f-int-8-3)
  (handlers (parse "branch_cond"))
)
(define-operand
  (name int086)
  (comment "int 8 6")
  (attrs all-isas)
  (type h-sint)
  (mode SI)
  (index f-int-8-6)
  (handlers (parse "branch_and_link"))
)
(define-operand
  (name int089)
  (comment "int 8 9")
  (attrs all-isas)
  (type h-sint)
  (mode SI)
  (index f-int-8-9)
  (handlers (parse "bra"))
)
(define-operand
  (name int023)
  (comment "int 2 3")
  (attrs all-isas)
  (type h-sint)
  (mode SI)
  (index f-int-2-3)
  (handlers (parse "bra"))
)
(define-operand
  (name s22)
  (comment "s 22")
  (attrs all-isas)
  (type h-sint)
  (mode SI)
  (index f-s-22)
  (handlers (parse "bra32"))
)
(define-operand
  (name s16)
  (comment "s 16")
  (attrs all-isas)
  (type h-sint)
  (mode SI)
  (index f-s-16)
  (handlers (parse "branch_and_link32"))
)
(define-operand
  (name s10-13)
  (comment "for format 13")
  (attrs all-isas)
  (type h-sint)
  (mode SI)
  (index f-s-form-13)
  (handlers (parse "bra32"))
)
(define-operand
  (name s10)
  (comment "s 10")
  (attrs all-isas)
  (type h-sint)
  (mode SI)
  (index f-s-10-fin)
  (handlers (parse "branch_cond32"))
)

;;
;; Instruction macros
;;
;; Format 1
(define-pmacro (aap-format-1 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic "${xdest},${xsrc1},${xsrc2}"))
      (format (.splice + (f-length #b0) (f-opcode opcode) xdest xsrc1 xsrc2))
      (semantics semantic1 semantic2 (set pc (add pc 1)))
    )
  )
)
;; Format JMP  (rte)
(define-pmacro (aap-format-jmp mnemonic opcode (semantic1))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic "${xdest}"))
      (format (.splice + (f-x-length #b0) (f-opcode opcode) xdest xsrc1 xsrc2))
      (semantics semantic1 (set xsrc1 0)(set xsrc2 0))
    )
  )
)
;; Format JAL
(define-pmacro (aap-format-jal mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic "${xdest},${xsrc2}"))
      (format (.splice + (f-x-length #b0) (f-opcode opcode) xdest xsrc1 xsrc2))
      (semantics semantic1 semantic2 (set xsrc1 0))
    )
  )
)
;; Format MOV
(define-pmacro (aap-format-mov mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic "${xdest},${xsrc1}"))
      (format (.splice + (f-x-length #b0) (f-opcode opcode) xdest xsrc1 xsrc2))
      (semantics semantic1 semantic2 (set xsrc2 0))
    )
  )
)
;; Format 2
(define-pmacro (aap-format-2 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic "${xdest},${xsrc1},${uint023}"))
      (format (.splice + (f-x-length #b0) (f-opcode opcode) xdest xsrc1 uint023))
      (semantics semantic1 semantic2 (set pc (add pc 1)))
    )
  )
)
;; Format 3
(define-pmacro (aap-format-3 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic "${int083},${xsrc1},${xsrc2}"))
      (format (.splice + (f-x-length #b0) (f-opcode opcode) int083 xsrc1 xsrc2))
      (semantics (if (semantic xsrc1 xsrc2)
                     (set pc (add pc (ext SI int083)))
		     (set pc (add pc 1))))
    )
  )
)
;; Format 4
(define-pmacro (aap-format-4 mnemonic opcode (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic))
      (format (.splice + (f-x-length #b0) (f-opcode opcode) xdest xsrc1 int023))
      (semantics semantic1 semantic2 semantic3 (set pc (add pc 1)))
    )
  )
)
;; Format 5
(define-pmacro (aap-format-5 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic "${xdest},${uint056}"))
      (format (.splice + (f-x-length #b0) (f-opcode opcode) xdest uint056))
      (semantics semantic (set pc (add pc 1)))
    )
  )
)
;; Format 6, BAL
(define-pmacro (aap-format-6 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic "${int086},${xsrc2}"))
      (format (.splice + (f-x-length #b0) (f-opcode opcode) int086 xsrc2))
      (semantics (set xsrc2 (add pc 1))
                 (set pc (add pc (ext SI int086))))  ;;Rb <- PC + 1, PC <- PC + SignExt(S)
    )
  )
)
;; Format 7, BRA
(define-pmacro (aap-format-7 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap16))
      (syntax (.str mnemonic "${int089}"))
      (format (.splice + (f-x-length #b0) (f-opcode opcode) int089))
      (semantics (set pc (add pc (ext SI int089))))   ;;PC <- PC + SignExt(S)
    )
  )
)
;; Format 8
(define-pmacro (aap-format-8 mnemonic opcode0 opcode1 (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${d6},${a6},${b6}"))
      (format (.splice + (f-length #b1) (f-opcode opcode0) d6 a6 b6
      	      	       	 (f-x-length #b0) (f-x-opcode opcode1)))
      (semantics semantic1 semantic2 semantic3)
    )
  )
)
;; Format JMP32
(define-pmacro (aap-format-jm32 mnemonic opcode0 opcode1 (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${d6}"))
      (format (.splice + (f-length #b1) (f-opcode opcode0) d6 a6 b6
                         (f-x-length #b0) (f-x-opcode opcode1)))
      (semantics semantic1 semantic2 semantic3 (set a6 0)(set b6 0))
    )
  )
)
;; Format JAL32
(define-pmacro (aap-format-ja32 mnemonic opcode0 opcode1 (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${d6},${b6}"))
      (format (.splice + (f-length #b1) (f-opcode opcode0) d6 a6 b6
                         (f-x-length #b0) (f-x-opcode opcode1)))
      (semantics semantic1 semantic2 semantic3 (set a6 0))
    )
  )
)
;; Format MOV32
(define-pmacro (aap-format-mo32 mnemonic opcode0 opcode1 (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${d6},${a6}"))
      (format (.splice + (f-length #b1) (f-opcode opcode0) d6 a6 b6
      	      	       	 (f-x-length #b0) (f-x-opcode opcode1)))
      (semantics semantic1 semantic2 semantic3 (set b6 0))
    )
  )
)
;; Format 9
(define-pmacro (aap-format-9 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${d6},${a6},${i6}"))
      (format (.splice + (f-length #b1) (f-opcode opcode) d6 a6 i6
      	      	       	 (f-x-length #b0) (f-x-opcode #b0)))
      (semantics semantic1 semantic2 (set pc (add pc 2)))
    )
  )
)
;; Format 10
(define-pmacro (aap-format-10 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${d6},${a6},${i9}"))
      (format (.splice + (f-length #b1) (f-opcode opcode) d6 a6 i9
      	      	       	 (f-x-length #b0) (f-class-1 #b1) (f-x-class #b0)))
      (semantics (set pc (add pc 2))
		 (set d6 (semantic a6 i9))
		 )
    )
  )
)
;; Format 11
(define-pmacro (aap-format-11 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${d6},${a6},${i10}"))
      (format (.splice + (f-length #b1) (f-opcode opcode) d6 a6 i10
      	      	       	 (f-x-length #b0) (f-x-class #b0)))
      (semantics semantic1 semantic2 (set pc (add pc 2)))
    )
  )
)
;; Format 12
(define-pmacro (aap-format-12 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${s10},${a6},${b6}"))
      (format (.splice + (f-length #b1) (f-opcode opcode) s10 a6 b6
      	      	       	 (f-x-length #b0) (f-x-class #b0)))
      (semantics (set pc (add pc 2))
      		 (if (semantic a6 b6)
      		     (set pc (add pc (ext SI s10)))
		 ))
    )
  )
)
;; Format 13
(define-pmacro (aap-format-13 mnemonic opcode (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic))
      (format (.splice + (f-length #b1) (f-opcode opcode) d6 a6 s10-13
      	      	       	 (f-x-length #b0) (f-x-class #b0)))
      (semantics semantic1 semantic2 semantic3 (set pc (add pc 2)))
    )
  )
)
;; Format 14
(define-pmacro (aap-format-14 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${d6},${i12}"))
      (format (.splice + (f-length #b1) (f-opcode opcode) d6 i12
      	      	       	 (f-x-length #b0) (f-x-opcode #b0)))
      (semantics (if (le i12 4)
      		     (set d6 (c-call USI "@cpu@_nop_insn" i12 d6))
		 ))
    )
  )
)
;; Format 15, MOVI
(define-pmacro (aap-format-15 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${d6},${i16}"))
      (format (.splice + (f-length #b1) (f-opcode opcode) d6 i16
      	      	       	 (f-x-length #b0) (f-x-class #b0)))
      (semantics (set d6 i16) (set pc (add pc 2)))	 ;;Rd <- I, PC <- PC + 2
    )
  )
)
;; Format 16, BAL
(define-pmacro (aap-format-16 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${s16},${b6}"))
      (format (.splice + (f-length #b1) (f-opcode opcode) s16 b6 ;; 19, 1
      	      	       	 (f-x-length #b0) (f-x-class #b0)))
      (semantics (set b6 (add pc 2))
                 (set pc (add pc (ext SI s16)))
		 )					;;Rb <- PC + 2, PC <- PC + SignExt(S)
    )
  )
)
;; Format 17, BRA
(define-pmacro (aap-format-17 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs (ISA aap32))
      (syntax (.str mnemonic " ${s22}"))
      (format (.splice + (f-length #b1) (f-opcode opcode) s22
      	      	       	 (f-x-length #b0) (f-x-class #b0)))
      (semantics(set pc (add pc (ext SI s22))))	 ;;PC <- PC + SignExt(S)
    )
  )
)


;;
;; Instructions
;;
;; Format 1
(aap-format-1 "add " #b000001 (set xdest (add xsrc1 xsrc2))(set carry (ge (add xsrc1 xsrc2) 0x10000)))
(aap-format-1 "sub " #b000010 (set xdest (sub xsrc1 xsrc2))(set carry (lt xsrc1 xsrc2)))
(aap-format-1 "and " #b000011 (set xdest (and xsrc1 xsrc2))(nop))
(aap-format-1 "or "  #b000100 (set xdest (or xsrc1 xsrc2))(nop))
(aap-format-1 "xor " #b000101 (set xdest (xor xsrc1 xsrc2))(nop))
(aap-format-1 "asr " #b000110 (set xdest (srl (or xsrc1 (sll SI carry 16)) xsrc2))(set carry 0))
(aap-format-1 "lsl " #b000111 (set xdest (sll xsrc1 xsrc2))(nop))
(aap-format-1 "lsr " #b001000 (set xdest (srl xsrc1 xsrc2))(nop))
(aap-format-mov "mov " #b001001 (set xdest xsrc1)(set pc (add pc 1)))
(aap-format-jmp "jmp " #b101000 (set pc xdest))
(aap-format-jal "jal " #b101001 (set xsrc2 (add pc 1))(set pc xdest))
(aap-format-1 "jeq "   #b101010 (if (eq xsrc1 xsrc2)(set pc xdest)(set pc (add pc 1)))(set pc (sub pc 1)))
(aap-format-1 "jne "   #b101011 (if (ne xsrc1 xsrc2) (set pc xdest)(set pc (add pc 1)))(set pc (sub pc 1)))
(aap-format-1 "jlts "  #b101100 (if (lt xsrc1 xsrc2) (set pc xdest)(set pc (add pc 1)))(set pc (sub pc 1)))
(aap-format-1 "jles "  #b101101 (if (le xsrc1 xsrc2) (set pc xdest)(set pc (add pc 1)))(set pc (sub pc 1)))
(aap-format-1 "jltu "  #b101110 (if (lt xsrc1 xsrc2) (set pc xdest)(set pc (add pc 1)))(set pc (sub pc 1)))
(aap-format-1 "jleu "  #b101111 (if (le xsrc1 xsrc2) (set pc xdest)(set pc (add pc 1)))(set pc (sub pc 1)))
(aap-format-jmp "rte " #b110000 (set pc xdest))

;; Format 2
(aap-format-2 "addi " #b001010 (set xdest (add xsrc1 uint023))(set carry (ge (add xsrc1 uint023) 0x10000)))
(aap-format-2 "subi " #b001011 (set xdest (sub xsrc1 uint023))(set carry (gt xsrc1 uint023)))
(aap-format-2 "asri " #b001100 (set xdest (srl (or xsrc1 (sll SI carry 16)) uint023))(set carry 0))
(aap-format-2 "lsli " #b001101 (set xdest (sll xsrc1 xsrc2))(nop))
(aap-format-2 "lsri " #b001110 (set xdest (srl xsrc1 xsrc2))(nop))

;; Format 3
(aap-format-3 "beq "  #b101100 eq)
(aap-format-3 "bne "  #b101101 ne)
(aap-format-3 "blts " #b101110 lt)
(aap-format-3 "bles " #b101111 le)
(aap-format-3 "bltu " #b110000 lt)   ;;FIX ME:lt->ltu (causes LTUUSI)
(aap-format-3 "bleu " #b110001 le)   ;;FIX ME:le->leu (causes LEUUSI)

;; Format 4
(aap-format-4 "ldb ${xdest},[${xsrc1},${int023}]" #b010000 (set xdest(mem QI(add xsrc1 (ext SI int023))))(nop)(nop))
(aap-format-4 "ldw ${xdest},[${xsrc1},${int023}]" #b010100 (set xdest(or(mem QI(addc xsrc1 (ext SI int023) 1))(sll (mem QI(add xsrc1 (ext SI int023))) 8)))(nop)(nop))
(aap-format-4 "ldb ${xdest},[${xsrc1}+,${int023}]" #b010001 (set xdest(mem QI (add xsrc1 (ext SI int023))))(set xsrc1(add xsrc1 (ext SI int023)))(nop))
(aap-format-4 "ldw ${xdest},[${xsrc1}+,${int023}]" #b010101 (set xdest(or(mem QI (addc xsrc1 (ext SI int023) 1))(sll (mem QI (add xsrc1 (ext SI int023))) 8)))(set xsrc1(add xsrc1 (ext SI int023)))(nop))
(aap-format-4 "ldb ${xdest},[-${xsrc1},${int023}]" #b010010 (set xsrc1(sub xsrc1 (ext SI int023)))(set xdest (ext DI (mem QI xsrc1)))(nop))
(aap-format-4 "ldw ${xdest},[-${xsrc1},${int023}]" #b010110 (set xsrc1(sub xsrc1 (ext SI int023)))(set xdest(or (ext DI (mem QI xsrc1))(sll (ext DI (mem QI (add xsrc1 1))) 8)))(nop))
(aap-format-4 "stb [${xdest},${int023}],${xsrc1}" #b011000 (set(mem QI (add xdest (ext SI int023)))(and xsrc1 255))(nop)(nop))
(aap-format-4 "stw [${xdest},${int023}],${xsrc1}" #b011100 (set (mem QI (add xdest (ext SI int023)))(and xsrc1 255))(set (mem QI (addc xdest (ext SI int023) 1))(srl xsrc1 8))(nop))
(aap-format-4 "stb [${xdest}+,${int023}],${xsrc1}" #b011001 (set (mem QI (add xdest (ext SI int023)))(and xsrc1 255))(set d6 (add d6 (ext SI int023)))(nop))
(aap-format-4 "stw [${xdest}+,${int023}],${xsrc1}" #b011101 (set (mem QI (add xdest (ext SI int023)))(and xsrc1 255))(set (mem QI (addc xdest (ext SI int023) 1))(srl xsrc1 8))(set d6 (add d6 (ext SI int023))))
(aap-format-4 "stb [-${xdest},${int023}],${xsrc1}" #b011010 (set d6 (sub d6 (ext SI int023)))(set (mem QI (add xdest))(and xsrc1 255))(nop))
(aap-format-4 "stw [-${xdest},${int023}],${xsrc1}" #b011110 (set d6 (sub d6 (ext SI int023)))(set (mem QI (add xdest))(and xsrc1 255))(set (mem QI (add xdest 1))(srl xsrc1 8)))

;; Format 5
(aap-format-5 "nop " #b000000 (nop))
	      	    ;;0: breakpoint, 1: do nothing, 2: exit, 3: stdout, 4: stderr
(aap-format-5 "movi " #b001111 (set xdest uint056))

;; Format 6
(aap-format-6 "bal " #b100001)

;; Format 7
(aap-format-7 "bra " #b100000)

;; Format 8
(aap-format-8 "add" #b000001 #b000000 (set d6 (add a6 b6))(set carry (ge (add a6 b6) (const 65536)))(set pc (add pc 2)))
(aap-format-8 "sub" #b000010 #b000000 (set d6 (sub a6 b6))(set carry (gt a6 b6))(set pc (add pc 2)))
(aap-format-8 "and" #b000011 #b000000 (set d6 (and a6 b6))(set pc (add pc 2))(nop))
(aap-format-8 "or"  #b000100  #b000000 (set d6 (or a6 b6))(set pc (add pc 2))(nop))
(aap-format-8 "xor" #b000101 #b000000 (set d6 (xor a6 b6))(set pc (add pc 2))(nop))
(aap-format-8 "asr" #b000110 #b000000 (set d6 (srl (or a6 (sll SI carry 16)) b6))(set carry 0)(set pc (add pc 2)))
(aap-format-8 "lsl" #b000111 #b000000 (set d6 (sll a6 b6))(set pc (add pc 2))(nop))
(aap-format-8 "lsr" #b001000 #b000000 (set d6 (srl a6 b6))(set pc (add pc 2))(nop))
(aap-format-mo32 "mov" #b001001 #b000000 (set d6 a6)(set pc (add pc 2))(nop))
(aap-format-8 "addc" #b000001 #b000001 (set d6 (addc a6 b6 carry))(set carry (ge (addc a6 b6 carry) 0x10000))(set pc (add pc 2)))
(aap-format-8 "subc" #b000010 #b000001 (set d6 (subc a6 b6 carry))(set carry (gt (add b6 carry) a6))(set pc (add pc 2)))
(aap-format-jm32 "jmp"  #b101000 #b000000 (set pc d6)(nop)(nop))
(aap-format-ja32 "jal"  #b101001 #b000000 (set b6 (add pc 2))(set pc d6)(nop))
(aap-format-8 "jeq"     #b101010 #b000000 (if (eq a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))
(aap-format-8 "jne"     #b101011 #b000000 (if (ne a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))
(aap-format-8 "jlts"    #b101100 #b000000 (if (lt a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))
(aap-format-8 "jles"    #b101101 #b000000 (if (le a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))
(aap-format-8 "jltu"    #b101110 #b000000 (if (ltu a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))
(aap-format-8 "jleu"    #b101111 #b000000 (if (leu a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))
(aap-format-jm32 "jmpl" #b101000 #b000001 (set dest1 (add d6 1))(set pc (or (sll dest1 16) d6))(nop))
(aap-format-ja32 "jall" #b101001 #b000001 (set b6 (add pc 2))(set dest1 (add d6 1))(set pc (or (sll dest1 16) d6)))
(aap-format-8 "jeql" #b101010 #b000001 (set dest1 (add d6 1))(if (eq a6 b6) (set pc (or (sll dest1 16) d6))(set pc (add pc 2)))(nop))
(aap-format-8 "jnel" #b101011 #b000001 (set dest1 (add d6 1))(if (ne a6 b6) (set pc (or (sll dest1 16) d6))(set pc (add pc 2)))(nop))
(aap-format-8 "jltsl" #b101100 #b000001 (set dest1 (add d6 1))(if (lt a6 b6) (set pc (or (sll dest1 16) d6))(set pc (add pc 2)))(nop))
(aap-format-8 "jlesl" #b101101 #b000001 (set dest1 (add d6 1))(if (le a6 b6) (set pc (or (sll dest1 16) d6))(set pc (add pc 2)))(nop))
(aap-format-8 "jltul" #b101110 #b000001 (set dest1 (add d6 1))(if (ltu a6 b6) (set pc (or (sll dest1 16) d6))(set pc (add pc 2)))(nop))
(aap-format-8 "jleul" #b101111 #b000001 (set dest1 (add d6 1))(if (leu a6 b6) (set pc (or (sll dest1 16) d6))(set pc (add pc 2)))(nop))

;; Format 9
(aap-format-9 "asri" #b001100 (set d6 (srl (or a6 (sll SI carry 16)) i6))(set carry 0))
(aap-format-9 "lsli" #b001101 (set d6 (sll a6 i6))(nop))
(aap-format-9 "lsri" #b001110 (set d6 (srl a6 i6))(nop))

;; Format 10
(aap-format-10 "andi" #b000011 and)
(aap-format-10 "ori"  #b000100 or)
(aap-format-10 "xori" #b000101 xor)

;; Format 11
(aap-format-11 "addi" #b001010 (set d6 (add a6 i10))(set carry (ge (add a6 i10) 0x10000)))
(aap-format-11 "subi" #b001011 (set d6 (sub a6 i10))(set carry (gt i10 a6)))

;; Format 12
(aap-format-12 "beq"  #b100010 eq)
(aap-format-12 "bne"  #b100011 ne)
(aap-format-12 "blts" #b100100 lt)
(aap-format-12 "bles" #b100101 le)
(aap-format-12 "bltu" #b100110 ltu)
(aap-format-12 "bleu" #b100111 leu)

;; Format 13
(aap-format-13 "ldb ${d6},[${a6},${s10-13}]" #b010000 (set d6(mem QI(add a6 (ext SI s10-13))))(nop)(nop))
(aap-format-13 "ldw ${d6},[${a6},${s10-13}]" #b010100 (set d6(or(mem QI(add a6 (ext SI s10-13)))(sll (mem QI (addc a6 (ext SI s10-13) 1)) 8)))(nop)(nop))
(aap-format-13 "ldb ${d6},[${a6}+,${s10-13}]" #b010001 (set d6(mem QI(add a6 (ext SI s10-13))))(set a6 (add a6 (ext SI s10-13)))(nop))
(aap-format-13 "ldw ${d6},[${a6}+,${s10-13}]" #b010101 (set d6(or(mem QI(add a6 (ext SI s10-13)))(sll (mem QI (addc a6 (ext SI s10-13) 1)) 8)))(set a6(add a6 (ext SI s10-13)))(nop))
(aap-format-13 "ldb ${d6},[-${a6},${s10-13}]" #b010010 (set a6(sub a6 (ext SI s10-13)))(set d6(mem QI(a6)))(nop))
(aap-format-13 "ldw ${d6},[-${a6},${s10-13}]" #b010110 (set a6(add a6 (ext SI s10-13)))(set d6(or(mem QI (a6))(sll (mem QI(add a6 1)) 8)))(nop))
(aap-format-13 "stb [${d6},${s10-13}],${a6}" #b011000 (set (mem QI (add d6 (ext SI s10-13)))(and a6 255))(nop)(nop))
(aap-format-13 "stw [${d6},${s10-13}],${a6}" #b011100 (set (mem QI (add d6 (ext SI s10-13)))(and a6 255))(set (mem QI (addc d6 (ext SI s10-13) 1))(srl a6 8))(nop))
(aap-format-13 "stb [${d6}+,${s10-13}],${a6}" #b011001 (set (mem QI (add d6 (ext SI s10-13)))(and a6 255))(set d6(add d6 (ext SI s10-13)))(nop))
(aap-format-13 "stw [${d6}+,${s10-13}],${a6}" #b011101 (set (mem QI (add d6 (ext SI s10-13)))(and a6 255))(set (mem QI (addc d6 (ext SI s10-13) 1))(srl a6 8))(set d6(add d6 (ext SI s10-13))))
(aap-format-13 "stb [-${d6},${s10-13}],${a6}" #b011010 (set d6(sub d6 (ext SI s10-13)))(set (mem QI (add d6 (ext SI s10-13)))(and a6 255))(nop))
(aap-format-13 "stw [-${d6},${s10-13}],${a6}" #b011110 (set d6(sub d6 (ext SI s10-13)))(set (mem QI (add d6 (ext SI s10-13)))(and a6 255))(set d6(or(mem QI (a6))(srl (mem QI(add a6 1)) 8))))

;; Format 14
(aap-format-14 "nop" #b000000)

;; Format 15
(aap-format-15 "movi" #b001111)

;; Format 16
(aap-format-16 "bal" #b100001)

;; Format 17
(aap-format-17 "bra" #b100000)
