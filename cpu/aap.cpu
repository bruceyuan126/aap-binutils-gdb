; AAP architecture.  -*- Scheme -*-
; Copyright 2016 Embecosm
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, see <http://www.gnu.org/licenses/>

(include "simplify.inc")

; The OpenRISC family is a set of RISC microprocessor architectures with an
; emphasis on scalability and is targetted at embedded use.
; The CPU RTL development is a collaborative open source effort.
; http://opencores.org/or1k
; http://openrisc.net

(define-arch
  (name aap)
  (comment "AAP")
  (default-alignment aligned)
  (insn-lsb0? #t)
  (machs aap)
  (isas aap)
)

; Instruction set parameters.
(define-isa
  ; Name of the ISA.
  (name aap)
  ; Base insturction length.  Instructions are either 16 or 32 bit.
  (default-insn-word-bitsize 16)
  (default-insn-bitsize 16)
  (base-insn-bitsize 16)
  )

(define-cpu
  (name aap)
  (comment "AAP CPU Family")
  (endian little)
  (insn-endian little)
  (word-bitsize 16)
  (insn-chunk-bitsize 16))

(define-mach
  (name aap)
  (comment "AAP Mach")
  (cpu aap)
  (isas aap))

(define-model
  (name aap)
  (comment "AAP Model")
  (mach aap)

  (unit u-exec "execution unit" ()
	1 1 ; issue done
	() () () ()))

;; --------- Helper Macros ---------

(define-pmacro all-aap-isas () (ISA aap))

(define-pmacro (dnxf fname fcomment fattrs fstart flength)
  (define-ifield
    (name fname)
    (comment fcomment)
    (.splice attrs (.unsplice fattrs))
    (start fstart)
    (length flength)
    (word-offset 16)
    (word-length 16)
    (mode UINT)))

;; --------- Hardware ---------

(define-keyword
  (name gr-names)
  (print-name h-registers)
  (prefix "")
  (values
   (r0  0)  (r1  1)  (r2  2)  (r3  3)  (r4  4)  (r5  5)  (r6  6)  (r7  7)
   (r8  8)  (r9  9) (r10 10) (r11 11) (r12 12) (r13 13) (r14 14) (r15 15)
   (r16 16) (r17 17) (r18 18) (r19 19) (r20 20) (r21 21) (r22 22) (r23 23)
   (r24 24) (r25 25) (r26 26) (r27 27) (r28 28) (r29 29) (r30 30) (r31 31)
   (r32 32) (r33 33) (r34 34) (r35 35) (r36 36) (r37 37) (r38 38) (r39 39)
   (r40 40) (r41 41) (r42 42) (r43 43) (r44 44) (r45 45) (r46 46) (r47 47)
   (r48 48) (r49 49) (r50 50) (r51 51) (r52 52) (r53 53) (r54 54) (r55 55)
   (r56 56) (r57 57) (r58 58) (r59 59) (r60 60) (r61 61) (r62 62) (r63 63)))

(define-hardware
  (name h-gpr)
  (comment "General Purpose Registers")
  (attrs all-aap-isas CACHE-ADDR)
  (type register SI (8))
  (indices extern-keyword gr-names))

(dnh h-pc "program counter" (PC PROFILE) (pc) () () ())

;; --------- Instruction Fields ---------

;; 16 Bit Instructions

;; 1 11 111
;; 5 43 2109 876 543 210

;; 0 CC OOOO DDD AAA BBB
;; 0 CC OOOO DDD AAA III
;; 0 CC OOOO SSS AAA BBB
;; 0 CC OOOO DDD AAA SSS
;; 0 CC OOOO DDD III III
;; 0 CC OOOO SSS SSS BBB
;; 0 CC OOOO SSS SSS SSS

(dnf f-length    "long insn bit"      (all-aap-isas) 15 1)

(dnf f-class     "instruction class"  (all-aap-isas) 14 2) ;; CC
(dnf f-opcode    "instruction opcode" (all-aap-isas) 12 4) ;; OOOO

(dnf f-dst-reg   "dst reg"            (all-aap-isas) 8  3) ;; DDD
(dnf f-src-reg-1 "src reg 1"          (all-aap-isas) 5  3) ;; AAA
(dnf f-src-reg-2 "src reg 2"          (all-aap-isas) 2  3) ;; BBB

(dnxf f-x-dst-reg   "dst reg (x)"     (all-aap-isas) 8  3) ;; DDD
(dnxf f-x-src-reg-1 "src reg 1 (x)"   (all-aap-isas) 5  3) ;; AAA
(dnxf f-x-src-reg-2 "src reg 2 (x)"   (all-aap-isas) 2  3) ;; BBB

(dnxf f-x-filler-7  "7-bit filler field"  (all-aap-isas) 15 7)
(dnxf f-x-filler-3  "3-bit filler field"  (all-aap-isas) 15 3)

(df f-uint-5-6 "imm: ----------iiiiii" (all-aap-isas) 5  6 UINT #f #f)
(df f-uint-2-3 "imm: -------------iii" (all-aap-isas) 2  3 UINT #f #f)

(df f-int-5-6 "imm: ----------ssssss" (all-aap-isas) 5  6 INT #f #f)
(df f-int-2-3 "imm: -------------sss" (all-aap-isas) 2  3 INT #f #f)

(df f-simm9 "9-bit branch displacement" (all-aap-isas PCREL-ADDR) 8 9 INT
    ((value pc) (sra SI (sub SI value pc) 1))
    ((value pc) (add SI (sll SI value 1) pc)))

(df f-simm6 "6-bit branch displacement" (all-aap-isas PCREL-ADDR) 8 6 INT
    ((value pc) (sra SI (sub SI value pc) 1))
    ((value pc) (add SI (sll SI value 1) pc)))

(df f-simm3 "3-bit branch displacement" (all-aap-isas PCREL-ADDR) 8 3 INT
    ((value pc) (sra SI (sub SI value pc) 1))
    ((value pc) (add SI (sll SI value 1) pc)))

;; --------- Instruction Multi-IFields ---------

(define-pmacro (define-aap-reg-multi-ifield f-name f-comment f-sub-field-1 f-sub-field-2)
  (define-multi-ifield
    (name f-name)
    (comment f-comment)
    (attrs all-aap-isas)
    (mode UINT)
    (subfields f-sub-field-1 f-sub-field-2)
    (insert (sequence ()
                      (set (ifield f-sub-field-1)
                           (and (ifield f-name) #x7))
                      (set (ifield f-sub-field-2)
                           (and (srl (ifield f-name) #x3) #x7))))
    (extract (sequence ()
                       (set (ifield f-name)
                            (or (ifield f-sub-field-1)
                                (sll (ifield f-sub-field-2) #x3)))))))

(define-aap-reg-multi-ifield f-long-dst-reg   "dst reg (6-bit)"   f-dst-reg   f-x-dst-reg)
(define-aap-reg-multi-ifield f-long-src-reg-1 "src reg 1 (6-bit)" f-src-reg-1 f-x-src-reg-1)
(define-aap-reg-multi-ifield f-long-src-reg-2 "src reg 2 (6-bit)" f-src-reg-2 f-x-src-reg-2)


;; APB: Temporary 
(df f-apb-1 "imm: -------iiiiiiiii" (all-aap-isas) 8  9 UINT #f #f)
(define-ifield
  (name f-apb-2)
  (comment "f-int-12-13")
  (attrs all-aap-isas)
  (start 12)
  (length 13)
  (word-offset 16)
  (word-length 16)
  (mode  INT))

(define-multi-ifield
   (name f-simm22)
   (comment "f-simm22")
   (attrs all-aap-isas PCREL-ADDR)
   (mode INT)
   (subfields f-apb-1 f-apb-2)
   (insert (sequence ()
                      (set (ifield f-apb-1)
                           (and (ifield f-simm22) #x1ff))
                      (set (ifield f-apb-2)
                           (and (srl (ifield f-simm22) #x9) #x1fff))))
   (extract (sequence ()
                       (set (ifield f-simm22)
                            (or (ifield f-apb-1)
                                (sll (ifield f-apb-2) #x9)))))
   (encode (value pc) (sra SI (sub SI value pc) 1))
   (decode (value pc) (add SI (sll SI value 1) pc)))



;; --------- Insn Enums ---------

(define-normal-insn-enum length "insn length" (all-aap-isas) LEN_
  f-length
  (.map .str (.iota 2)))

(define-normal-insn-enum class "insn class" (all-aap-isas) CLASS_
  f-class
  (.map .str (.iota 4)))

(define-normal-insn-enum opcode "insn opcode" (all-aap-isas) OP_
  f-opcode
  (.map .str (.iota 16)))

;; --------- Operands ---------

(define-operand
  (name dest)
  (comment "dest")
  (type h-gpr)
  (index f-dst-reg))

(define-operand
  (name src1)
  (comment "src1")
  (type h-gpr)
  (index f-src-reg-1))

(define-operand
  (name src2)
  (comment "src2")
  (type h-gpr)
  (index f-src-reg-2))

(define-operand
  (name uint3)
  (comment "uint3")
  (type h-uint)
  (index f-uint-2-3))

(define-operand
  (name uint6)
  (comment "uint6")
  (type h-uint)
  (index f-uint-5-6))

(define-operand
  (name int3)
  (comment "int3")
  (type h-sint)
  (index f-int-2-3))

(define-operand
   (name iaddr22)
   (comment "iaddr22")
   (type h-iaddr)
   (index f-simm22))

(define-operand
  (name iaddr9)
  (comment "iaddr9")
  (type h-iaddr)
  (index f-simm9))

(define-operand
  (name iaddr6)
  (comment "iaddr6")
  (type h-iaddr)
  (index f-simm6))

(define-operand
  (name iaddr3)
  (comment "iaddr3")
  (type h-iaddr)
  (index f-simm3))

;; --------- Multi-Field Operands ---------

(define-operand
  (name xdest)
  (comment "xdest")
  (type h-gpr)
  (index f-long-dst-reg))

(define-operand
  (name xsrc1)
  (comment "xsrc1")
  (type h-gpr)
  (index f-long-src-reg-1))

(define-operand
  (name xsrc2)
  (comment "xsrc2")
  (type h-gpr)
  (index f-long-src-reg-2))

;; --------- Support Macros ---------

(define-pmacro (aap-rrr-insn mnemonic class opcode)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${dest},${src1},${src2}"))
    (format (.splice + LEN_0 class opcode dest src1 src2))))

(define-pmacro (aap-rrz-insn mnemonic class opcode)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${dest},${src1}"))
    (format (.splice + LEN_0 class opcode dest src1 (f-src-reg-2 0)))))

(define-pmacro (aap-rzr-insn mnemonic class opcode)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${dest},${src2}"))
    (format (.splice + LEN_0 class opcode dest (f-src-reg-1 0) src2))))

(define-pmacro (aap-rzz-insn mnemonic class opcode)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${dest}"))
    (format (.splice + LEN_0 class opcode dest (f-src-reg-1 0) (f-src-reg-2 0)))))

(define-pmacro (aap-rri-insn mnemonic class opcode)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${dest},${src1},#${uint3}"))
    (format (.splice + LEN_0 class opcode dest src1 uint3))))

(define-pmacro (aap-ri-insn mnemonic class opcode)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${dest},#${uint6}"))
    (format (.splice + LEN_0 class opcode dest uint6))))

(define-pmacro (aap-ld-insn mnemonic opcode0 opcode1 opcode2)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${dest},(${src1},${int3})"))
    (format (.splice + LEN_0 CLASS_1 opcode1 dest src1 int3)))

  (define-insn
    (name (.sym mnemonic "_post_inc"))
    (comment (.str mnemonic "_post_inc"))
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${dest},(${src1}+,${int3})"))
    (format (.splice + LEN_0 CLASS_1 opcode1 dest src1 int3)))

  (define-insn
    (name (.sym mnemonic "_pre_dec"))
    (comment (.str mnemonic "_pre_dec"))
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${dest},(-${src1},${int3})"))
    (format (.splice + LEN_0 CLASS_1 opcode1 dest src1 int3))))

(define-pmacro (aap-st-insn mnemonic opcode0 opcode1 opcode2)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " (${dest},${int3}),${src1}"))
    (format (.splice + LEN_0 CLASS_1 opcode1 dest src1 int3)))

  (define-insn
    (name (.sym mnemonic "_post_inc"))
    (comment (.str mnemonic "_post_inc"))
    (attrs all-aap-isas)
    (syntax (.str mnemonic " (${dest}+,${int3}),${src1}"))
    (format (.splice + LEN_0 CLASS_1 opcode1 dest src1 int3)))

  (define-insn
    (name (.sym mnemonic "_pre_dec"))
    (comment (.str mnemonic "_pre_dec"))
    (attrs all-aap-isas)
    (syntax (.str mnemonic " (-${dest},${int3}),${src1}"))
    (format (.splice + LEN_0 CLASS_1 opcode1 dest src1 int3))))

(define-pmacro (aap-s-insn mnemonic opcode)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${iaddr9}"))
    (format (.splice + LEN_0 CLASS_2 opcode iaddr9))))

(define-pmacro (aap-sr-insn mnemonic opcode)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${iaddr6},${src2}"))
    (format (.splice + LEN_0 CLASS_2 opcode iaddr6 src2))))

(define-pmacro (aap-srr-insn mnemonic opcode)
  (define-insn
    (name (.sym mnemonic))
    (comment mnemonic)
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${iaddr3},${src1},${src2}"))
    (format (.splice + LEN_0 CLASS_2 opcode iaddr3 src1 src2))))

;; --------- 16-bit Instructions ---------

;; Class 0
(aap-ri-insn  "nop"  CLASS_0 OP_0)
(aap-rrr-insn "add"  CLASS_0 OP_1)
(aap-rrr-insn "sub"  CLASS_0 OP_2)
(aap-rrr-insn "and"  CLASS_0 OP_3)
(aap-rrr-insn "or"   CLASS_0 OP_4)
(aap-rrr-insn "xor"  CLASS_0 OP_5)
(aap-rrr-insn "asr"  CLASS_0 OP_6)
(aap-rrr-insn "lsl"  CLASS_0 OP_7)
(aap-rrr-insn "lsr"  CLASS_0 OP_8)
(aap-rrz-insn "mov"  CLASS_0 OP_9)
(aap-rri-insn "addi" CLASS_0 OP_10)
(aap-rri-insn "subi" CLASS_0 OP_11)
(aap-rri-insn "asri" CLASS_0 OP_12)
(aap-rri-insn "lsli" CLASS_0 OP_13)
(aap-rri-insn "lsri" CLASS_0 OP_14)
(aap-ri-insn  "movi" CLASS_0 OP_15)

;; Class 1
(aap-ld-insn "ldb" OP_0  OP_1  OP2)
(aap-ld-insn "ldw" OP_4  OP_5  OP6)
(aap-st-insn "stb" OP_8  OP_9  OP10)
(aap-st-insn "stw" OP_12 OP_13 OP14)

;; Class 2
;; (aap-s-insn   "bra"  OP_0)
(aap-sr-insn  "bal"  OP_1)
(aap-srr-insn "beq"  OP_2)
(aap-srr-insn "bne"  OP_3)
(aap-srr-insn "blts" OP_4)
(aap-srr-insn "bgts" OP_5)
(aap-srr-insn "bltu" OP_6)
(aap-srr-insn "bgtu" OP_7)

(aap-rzz-insn "jmp"  CLASS_2 OP_8)
(aap-rzr-insn "jal"  CLASS_2 OP_9)
(aap-rrr-insn "jeq"  CLASS_2 OP_10)
(aap-rrr-insn "jne"  CLASS_2 OP_11)
(aap-rrr-insn "jlts" CLASS_2 OP_12)
(aap-rrr-insn "jgts" CLASS_2 OP_13)
(aap-rrr-insn "jltu" CLASS_2 OP_14)
(aap-rrr-insn "jgtu" CLASS_2 OP_15)

;; Class 3
(aap-rzz-insn "rte" CLASS_3 OP_0)

;; --------- 16-bit Macro Instructions ---------

(dnmi nop_no_param "nop with no operands" (all-aap-isas)
      "nop" (emit nop (dest r0) (uint6 1)))

;; --------- 32-bit Instructions ---------

(define-pmacro (aap-rrr-xinsn mnemonic class opcode)
  (define-insn
    (name (.sym mnemonic "_x"))
    (comment mnemonic "_extended")
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${xdest},${xsrc1},${xsrc2}"))
    (format (.splice + LEN_1 class opcode xdest xsrc1 xsrc2 (f-x-filler-7 0)))))

(define-pmacro (aap-rrz-xinsn mnemonic class opcode)
  (define-insn
    (name (.sym mnemonic "_x"))
    (comment mnemonic "_extended")
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${xdest},${xsrc1}"))
    (format (.splice + LEN_1 class opcode xdest xsrc1 (f-x-filler-7 0) (f-src-reg-2 0) (f-x-src-reg-2 0)))))

(define-pmacro (aap-s-xinsn mnemonic opcode)
  (define-insn
    (name (.sym mnemonic "_x"))
    (comment mnemonic "_extended")
    (attrs all-aap-isas)
    (syntax (.str mnemonic " ${iaddr22}"))
    (format (.splice + LEN_1 CLASS_2 opcode iaddr22 (f-x-filler-3 0)))))


;; (define-pmacro (aap-rzr-xinsn mnemonic class opcode)
;;   (define-insn
;;     (name (.sym mnemonic "_x"))
;;     (comment mnemonic "_extended")
;;     (attrs all-aap-isas)
;;     (syntax (.str mnemonic " ${xdest},${xsrc2}"))
;;     (format (.splice + LEN_1 class opcode xdest (f-long-src-reg-1 0) xsrc2))))
;; 
;; (define-pmacro (aap-rzz-xinsn mnemonic class opcode)
;;   (define-insn
;;     (name (.sym mnemonic "_x"))
;;     (comment mnemonic "_extended")
;;     (attrs all-aap-isas)
;;     (syntax (.str mnemonic " ${xdest}"))
;;     (format (.splice + LEN_1 class opcode xdest (f-long-src-reg-1 0) (f-long-src-reg-2 0)))))

;; Class 0
(aap-rrr-xinsn "add" CLASS_0 OP_1)
(aap-rrr-xinsn "sub" CLASS_0 OP_2)
(aap-rrr-xinsn "and" CLASS_0 OP_3)
(aap-rrr-xinsn "or"  CLASS_0 OP_4)
(aap-rrr-xinsn "xor" CLASS_0 OP_5)
(aap-rrr-xinsn "asr" CLASS_0 OP_6)
(aap-rrr-xinsn "lsl" CLASS_0 OP_7)
(aap-rrr-xinsn "lsr" CLASS_0 OP_8)
(aap-rrz-xinsn "mov" CLASS_0 OP_9)

;; Class 1

;; Class 2
(aap-s-xinsn "bra" OP_0)
; (aap-rzz-xinsn "jmp"  CLASS_2 OP_8)
; (aap-rzr-xinsn "jal"  CLASS_2 OP_9)
; (aap-rrr-xinsn "jeq"  CLASS_2 OP_10)
; (aap-rrr-xinsn "jne"  CLASS_2 OP_11)
; (aap-rrr-xinsn "jlts" CLASS_2 OP_12)
; (aap-rrr-xinsn "jgts" CLASS_2 OP_13)
; (aap-rrr-xinsn "jltu" CLASS_2 OP_14)
; (aap-rrr-xinsn "jgtu" CLASS_2 OP_15)
