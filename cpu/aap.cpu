;; AAP cpu thing: need to tell cgen the registers and ISA
;;
;; -*- Scheme -*-
;;

(include "simplify.inc")

;;
;; define-architure must appear first
;;
(define-arch
  (name aap)		;; name of cpu architecture
  (comment "AAP")
  (default-alignment aligned)
  (insn-lsb0? #t)	;; is bit 0 the msb or lsb? It is lsb true.
  (machs aap16 aap32)		;; list of machines
  (isas aap16 aap32)  		;; isa name
)


(define-isa	;;requires the same default
  (name aap16)
  (default-insn-word-bitsize 32)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
)
(define-isa	;;fetches 1 insn at a time & does not execute in parallel. 
  (name aap32)
  (default-insn-word-bitsize 32)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
)

;;
;; Cpu names must be distinct from the architecture name and machine names.
;; The "b" suffix stands for "base" and is the convention.
;; The "f" suffix stands for "family" and is the convention.
;;
(define-cpu
  (name aapbf)
  (comment "AAP base family")
  (endian little)
  (word-bitsize 32)
  (insn-chunk-bitsize 32)
)

;;
;; Machines
;;
(define-mach	;;bfd name = bfd-aap
  (name aap16)
  (comment "16 bit AAP machine")
  (cpu aapbf)
  (isas aap16)
)
(define-mach	;;bfd name = bfd-aap
  (name aap32)
  (comment "32 bit AAP machine")
  (cpu aapbf)
  (bfd-name "aap")
  (isas aap32)
)

;;
;; Models
;;
(define-model
  (name aap16)
  (comment "16 bit AAP model")
  (mach aap16)
  
  (unit u-exec "Execution Unit" ()
    1 1 ;; issue done
    () ;; state
    () ;; inputs
    () ;; outputs
    () ;; profile action (default)
    )
)
(define-model
  (name aap32)
  (comment "32 bit AAP model")
  (mach aap32)
  
  (unit u-exec "Execution Unit" ()
    1 1 ;; issue done
    () ;; state
    () ;; inputs
    () ;; outputs
    () ;; profile action (default)
    )
)

;;
;; Attributes
;;
(define-pmacro all-aap-isas () (ISA aap16,aap32))
(define-pmacro ISA-32 (ISA aap32))
(define-pmacro ISA-16 (ISA aap16))

;;
;; General Purpose Registers
;;
;; AAP has between 4 and 64 16 bit general purpose registers

(define-keyword
  (name gpr-names)
  (print-name h-gpr)
  (prefix "")
  (values
   ($r0   0)($r1   1)($r2   2)($r3   3)($r4   4)($r5   5)($r6   6)($r7   7)
   ($r8   8)($r9   9)($r10 10)($r11 11)($r12 12)($r13 13)($r14 14)($r15 15)
   ($r16 16)($r17 17)($r18 18)($r19 19)($r20 20)($r21 21)($r22 22)($r23 23)
   ($r24 24)($r25 25)($r26 26)($r27 27)($r28 28)($r29 29)($r30 30)($r31 31)
   ($r32 32)($r33 33)($r34 34)($r35 35)($r36 36)($r37 37)($r38 38)($r39 39)
   ($r40 40)($r41 41)($r42 42)($r43 43)($r44 44)($r45 45)($r46 46)($r47 47)
   ($r48 48)($r49 49)($r50 50)($r51 51)($r52 52)($r53 53)($r54 54)($r55 55)
   ($r56 56)($r57 57)($r58 58)($r59 59)($r60 60)($r61 61)($r62 62)($r63 63)
  )
)

(define-hardware
  (name h-gpr)
  (comment "General Purpose Registers")
  (attrs all-aap-isas CACHE-ADDR)
  (type register USI (64))
  (indices extern-keyword gpr-names)
)


;; Control registers  
(define-keyword
  (name cr-names)
  (print-name h-cr)
  (prefix "")
  (values (cr0 0)   (cr1 1)   (cr2 2)   (cr3 3)
  	  (cr4 4)   (cr5 5)   (cr6 6)   (cr7 7)
	  (cr8 8)   (cr9 9)   (cr10 10) (cr11 11)
	  (cr12 12) (cr13 13) (cr14 14) (cr15 15))
)

(define-hardware
  (name h-cr)
  (comment "control registers")
  (type register UWI (16))
  (indices extern-keyword cr-names)
) 

;; Can allow special registers and flash
;; No delay slots

;; 32 bit register, top 8 bits is status, rest is PC
(dnh h-cf "carry flag" () (register BI) () () ())	;;FIX ME: PC & CF are part of the same reg
(dnh h-pc "program couner" (PC PROFILE) (pc) () () ())

;;
;; Instruction fields
;;
;; 15..................0 31.................16 
;; 0 00 0000 000 000 000 0 CC OOOO DDD AAA BBB
;; 0 00 0000 000 000 000 0 CC OOOO DDD AAA III
;; 0 00 0000 000 000 000 0 CC OOOO SSS AAA BBB
;; 0 00 0000 000 000 000 0 CC OOOO DDD AAA SSS
;; 0 00 0000 000 000 000 0 CC OOOO DDD III III
;; 0 00 0000 000 000 000 0 CC OOOO SSS SSS BBB
;; 0 00 0000 000 000 000 0 CC OOOO SSS SSS SSS
;;
;; 1 CC OOOO DDD AAA BBB 0 CC OOOO DDD AAA BBB
;; 1 CC OOOO DDD AAA III 0 CC OOOO DDD AAA III
;; 1 CC OOOO DDD AAA III 0 CC III1 DDD AAA III (removed)
;; 1 CC OOOO DDD AAA III 0 CC IIII DDD AAA III
;; 1 CC OOOO SSS AAA BBB 0 CC SSSS SSS AAA BBB

;; 1 CC OOOO DDD AAA SSS 0 CC SSSS DDD AAA SSS
;; 1 CC OOOO DDD III III 0 CC OOOO DDD III III
;; 1 CC OOOO DDD III III 0 CC IIII DDD III III
;; 1 CC OOOO SSS SSS BBB 0 CC SSSS SSS SSS BBB
;; 1 CC OOOO SSS SSS SSS 0 CC SSSS SSS SSS SSS

;;    name        comment                 macro   start length   (mode: UINT)
(dnf f-length "long insn bit (31-16)" (all-aap-isas) 15 1)
(dnf f-x-length "long insn bit (15-0)" (all-aap-isas) 31 1)

(dnf f-x-class "instruction class (15-0)" (all-aap-isas) 30 2)
(dnf f-opcode "instruction opcode & class (31-16)" (all-aap-isas) 14 6)
(dnf f-x-opcode "instruction opcode & class (15-0)" (all-aap-isas) 30 6)
(dnf f-class-1 "part of the lower opcode" (all-aap-isas) 25 1)

(dnf f-dst-hi "destination register (31-16)" (all-aap-isas) 24 3)
(dnf f-dst-lo "destination register for multifield (15-0)" (all-aap-isas) 8 3)
(dnf f-x-dst-reg "destination register (15-0)" (all-aap-isas) 8 3)

(dnf f-src-1-hi "source 1 register (31-16)" (all-aap-isas) 21 3)
(dnf f-src-1-lo "source 1 register for multifield (15-0)" (all-aap-isas) 5 3)
(dnf f-x-src-reg-1 "source 1 register (15-0)" (all-aap-isas) 5 3)

(dnf f-src-2-hi "source 2 register (31-16)" (all-aap-isas) 18 3)
(dnf f-src-2-lo "source 2 register for multifield (15-0)" (all-aap-isas) 2 3)
(dnf f-x-src-reg-2 "source 2 register (15-0)" (all-aap-isas) 2 3)

(df f-uint-18-3-hi "For multi-ifield f-i-6"
  (ISA-32) 18 3 UINT #f #f)
(df f-uint-21-6 "- -- ---- --- iii iii - -- ---- --- --- ---"
  (ISA-32) 21 6 UINT #f #f)
(df f-uint-28-4 "- -- ---- --- --- --- - -- iiii --- --- ---"  ;**
  (ISA-32) 28 4 UINT #f #f)
(df f-uint-28-3 "- -- ---- --- --- --- - -- iii- --- --- ---"
  (ISA-32) 28 3 UINT #f #f)
(df f-uint-2-3 "- -- ---- --- --- --- - -- ---- --- --- iii"
  (all-aap-isas) 2 3 UINT #f #f)
(df f-uint-2-3-lo "For multi-ifield f-i-6"
  (ISA-32) 2 3 UINT #f #f)
(df f-uint-5-6 "- -- ---- --- --- --- - -- ---- --- iii iii"
  (all-aap-isas) 5 6 UINT #f #f)

(df f-int-18-3 "- -- ---- --- --- sss - -- ---- --- --- ---"
  (ISA-32) 18 3 INT #f #f)
(df f-int-24-9 "- -- ---- sss sss sss - -- ---- --- --- ---"
  (ISA-32) 24 9 INT #f #f)
(df f-int-24-6 "- -- ---- sss sss --- - -- ---- --- --- ---"
  (ISA-32) 24 6 INT #f #f)
(df f-int-24-3 "- -- ---- sss --- --- - -- ---- --- --- ---"
  (ISA-32) 24 3 INT #f #f)
(df f-int-28-4-lo "For multi-ifields: - -- ssss --- --- ---"  ;*
  (ISA-32) 28 4 INT #f #f)
(df f-int-2-3 "- -- ---- --- --- --- - -- ---- --- --- sss"
  (all-aap-isas) 2 3 INT #f #f)
  
(df f-int-8-3 "- -- ---- --- --- --- - -- ---- sss --- ---"
  (all-aap-isas) 8 3 INT #f #f)
(df f-int-8-6 "- -- ---- --- --- --- - -- ---- sss sss ---"
  (all-aap-isas) 8 6 INT #f #f)
(df f-int-8-9 "- -- ---- --- --- --- - -- ---- sss sss sss"
  (all-aap-isas) 8 9 INT #f #f)
  
(df f-int-12-7 "- -- ---- --- --- --- - -- ssss sss --- ---"  ;Remade
  (ISA-32) 12 7 INT #f #f)
(df f-int-12-10 "- -- ---- --- --- --- - -- ssss sss sss ---" ;Remade
  (ISA-32) 12 10 INT #f #f)
(df f-int-12-13 "- -- ---- --- --- --- - -- ssss sss sss sss" ;Remade
  (ISA-32) 12 13 INT #f #f)

;; for reloc testing
(df f-u16 "16 bit unsigned" (all-aap-isas) 15 16 UINT #f #f)

;; carry flag
(dnf f-carry "carry flag" (all-aap-isas) 0 1)

;; d+1
(dnf f-dst+1-reg "R(d+1)" () 24 6)

;;
;; multi-ifields
;;
(define-multi-ifield
  (name f-s-13)
  (comment "sint 13bit")
  (mode INT)
  (subfields f-int-28-4-lo f-int-8-9)
  (insert (sequence ()
  	  	    (set (ifield f-int-28-4-lo)
		    	 (and (srl (ifield f-s-13)
			      	   (const 9))
			      (const #x1f)))
		    (set (ifield f-int-8-9)
		    	 (and (ifield f-s-13)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-s-13)
	   	(trunc HI
		       (or (sll (ifield f-int-28-4-lo)
		       	   	(const 9))
			   (ifield f-int-8-9)))
	    )
  )
)
(define-multi-ifield
  (name f-s-10)
  (comment "sint 10bit")
  (mode INT)
  (subfields f-int-28-4-lo f-int-8-6)
  (insert (sequence ()
  	  	    (set (ifield f-int-28-4-lo)
		    	 (and (srl (ifield f-s-10)
			      	   (const 6))
			      (const #x1f)))
		    (set (ifield f-int-8-6)
		    	 (and (ifield f-s-10)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-s-10)
	   	(trunc HI
		       (or (sll (ifield f-int-28-4-lo)
		       	   	(const 6))
			   (ifield f-int-8-6)))
	    )
  )
)
(define-multi-ifield
  (name f-s-7)
  (comment "sint 7bit")
  (mode INT)
  (subfields f-int-28-4-lo f-int-8-3)
  (insert (sequence ()
  	  	    (set (ifield f-int-28-4-lo)
		    	 (and (srl (ifield f-s-7)
			      	   (const 3))
			      (const #x1f)))
		    (set (ifield f-int-8-3)
		    	 (and (ifield f-s-7)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-s-7)
	   	(trunc HI
		       (or (sll (ifield f-int-28-4-lo)
		       	   	(const 3))
			   (ifield f-int-8-3)))
	    )
  )  (encode (value pc)
  	  (sequence SI () (set SI f-int-8-3 (c-raw-call SI "findHiS7" value))
	  	    	  (set SI f-int-28-4-lo (c-raw-call SI "findLoS7" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decodeS7" value f-int-28-4-lo f-int-8-3))
  )
)
(define-multi-ifield
  (name f-s-22)
  (comment "sint 22bit format-17")
  (mode INT)
  (subfields f-int-24-9 f-s-13)  ;f-int-28-4-lo f-int-8-9
  (insert (sequence ()
  	  	    (set (ifield f-int-24-9)
		    	 (and (srl (ifield f-s-22)
			      	   (const 13))
			      (const #x1f)))
		    (set (ifield f-s-13)
		    	 (and (ifield f-s-22)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-s-22)
	   	(trunc HI
		       (or (sll (ifield f-int-24-9)
		       	   	(const 13))
			   (ifield f-s-13)))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-int-8-9	(c-raw-call SI "findLoS22" value))
			  (set SI f-int-24-9 	(c-raw-call SI "findMidS22" value))
	  	    	  (set SI f-int-28-4-lo (c-raw-call SI "findHiS22" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decodeS22" value f-int-8-9 f-int-24-9 f-int-28-4-lo))
  )
)
(define-multi-ifield
  (name f-s-16)
  (comment "sint 16bit format-16")
  (mode INT)
  (subfields f-int-24-6 f-s-10)	;f-int-28-4-lo f-int-8-6
  (insert (sequence ()
  	  	    (set (ifield f-int-24-6)
		    	 (and (srl (ifield f-s-16)
			      	   (const 10))
			      (const #x1f)))
		    (set (ifield f-s-10)
		    	 (and (ifield f-s-16)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-s-16)
	   	(trunc HI
		       (or (sll (ifield f-int-24-6)
		       	   	(const 10))
			   (ifield f-s-10)))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-int-8-6	(c-raw-call SI "findLoS16" value))
			  (set SI f-int-24-6 	(c-raw-call SI "findMidS16" value))
	  	    	  (set SI f-int-28-4-lo (c-raw-call SI "findHiS16" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decodeS16" value f-int-8-6 f-int-24-6 f-int-28-4-lo))
  )
)
(define-multi-ifield
  (name f-s-10-fin)
  (comment "sint 10bit format-12")
  (mode INT);     middle	    high	  low
  (subfields f-int-24-3 f-s-7)  ;f-int-28-4-lo f-int-8-3
  (insert (sequence ()
  	  	    (set (ifield f-int-24-3)
		    	 (and (srl (ifield f-s-10-fin)
			      	   (const 7))
			      (const #x1f)))
		    (set (ifield f-s-7)
		    	 (and (ifield f-s-10-fin)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-s-10-fin)
	   	(trunc HI
		       (or (sll (ifield f-int-24-3)
		       	   	(const 7))
			   (ifield f-s-7)))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-int-8-3	(c-raw-call SI "findLoS10" value))
			  (set SI f-int-24-3 	(c-raw-call SI "findMidS10" value))
	  	    	  (set SI f-int-28-4-lo (c-raw-call SI "findHiS10" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decodeS10" value f-int-8-3 f-int-24-3 f-int-28-4-lo))
  )
)
(define-multi-ifield
  (name f-i-12)
  (comment "uint 12bit format-14")
  (mode UINT)
  (subfields f-uint-5-6 f-uint-21-6)
  (insert (sequence ()
  	  	    (set (ifield f-uint-21-6)
		    	 (and (srl (ifield f-i-12)
			      	   (const 6))
			      (const #x1f)))
		    (set (ifield f-uint-5-6)
		    	 (and (ifield f-i-12)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-12)
	   	(trunc HI
		       (or (sll (ifield f-uint-21-6)
		       	   	(const 6))
			   (ifield f-uint-5-6)))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-uint-21-6 (c-raw-call SI "findHi12" value))
	  	       	  (set SI f-uint-5-6 (c-raw-call SI "findLo12" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decode12" value f-uint-21-6 f-uint-5-6))
  )
)
(define-full-operand i12 "12bit uint" (all-aap-isas) h-uint USI f-i-12 ()()())

(define-multi-ifield
  (name f-i-16)
  (comment "uint 16bit format-14")
  (mode UINT)
  (subfields f-i-12 f-uint-28-4)  ;f-uint-21-6 f-uint-5-6
  (insert (sequence ()
  	  	    (set (ifield f-uint-28-4)
		    	 (and (srl (ifield f-i-16)
			      	   (const 4))
			      (const #x1f)))
		    (set (ifield f-i-12)
		    	 (and (ifield f-i-16)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-16)
	   	(trunc HI
		       (or (sll (ifield f-uint-28-4)
		       	   	(const 4))
			   (ifield f-i-12)))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-uint-21-6 (c-raw-call SI "findHi16" value));mid
	  	       	  (set SI f-uint-28-4 (c-raw-call SI "findMid16" value));hi
	  	       	  (set SI f-uint-5-6 (c-raw-call SI "findLo16" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decode16" value f-uint-21-6 f-uint-28-4 f-uint-5-6))
  )
)

(define-multi-ifield
  (name f-i-6)
  (comment "uint 6bit")
  (mode UINT)
  (subfields f-uint-18-3-hi f-uint-2-3-lo)
  (insert (sequence ()
  	  	    (set (ifield f-uint-18-3-hi)
		    	 (and (srl (ifield f-i-6)
			      	   (const 3))
			      (const #x1f)))
		    (set (ifield f-uint-2-3-lo)
		    	 (and (ifield f-i-6)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-6)
	   	(trunc HI
		       (or (sll (ifield f-uint-18-3-hi)
		       	   	(const 3))
			   (ifield f-uint-2-3-lo)))
	    )
  )
  (encode (value pc)
  	  (sequence USI () (set USI f-uint-2-3-lo (c-raw-call USI "findLo" value))
	  	    	  (set USI f-uint-18-3-hi (c-raw-call USI "findHi" value)))

  )
  (decode (value pc)
  	  (set USI value (c-raw-call USI "decode6" value f-uint-2-3-lo f-uint-18-3-hi))
  )
)
(define-full-operand i6 "6bit uint" (all-aap-isas) h-uint USI f-i-6 ()()())

(define-multi-ifield
  (name f-i-9)
  (comment "uint 9bit")
  (mode UINT)
  (subfields f-i-6 f-uint-28-3)
  (insert (sequence ()
  	  	    (set (ifield f-uint-28-3)
		    	 (and (srl (ifield f-i-9)
			      	   (const 3))
			      (const #x1f)))
		    (set (ifield f-i-6)
		    	 (and (ifield f-i-9)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-9)
	   	(trunc HI
		       (or (sll (ifield f-uint-28-3)
		       	   	(const 3))
			   (ifield f-i-6)))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-uint-28-3 (c-raw-call SI "findHi9" value))
	  	       	  (set SI f-uint-18-3-hi (c-raw-call SI "findMid9" value))
	  	       	  (set SI f-uint-2-3-lo (c-raw-call SI "findLo9" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decode9" value f-uint-2-3-lo f-uint-18-3-hi f-uint-28-3))
  )
)
(define-full-operand i9 "9bit uint" (all-aap-isas) h-uint USI f-i-9 ()()())

(define-multi-ifield
  (name f-i-10)
  (comment "uint 10bit")
  (mode UINT)
  (subfields f-i-6 f-uint-28-4)
  (insert (sequence ()
  	  	    (set (ifield f-uint-28-4)
		    	 (and (srl (ifield f-i-10)
			      	   (const 4))
			      (const #x1f)))
		    (set (ifield f-i-6)
		    	 (and (ifield f-i-10)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-10)
	   	(trunc HI
		       (or (sll (ifield f-uint-28-4)
		       	   	(const 4))
			   (ifield f-i-6)))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-uint-18-3-hi (c-raw-call SI "findMid10" value))
	  	       	  (set SI f-uint-28-4 (c-raw-call SI "findHi10" value))
	  	       	  (set SI f-uint-2-3-lo (c-raw-call SI "findLo10" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decode10" value f-uint-2-3-lo f-uint-28-4 f-uint-18-3-hi))
  )
)
(define-full-operand i10 "10bit uint" (all-aap-isas) h-uint USI f-i-10 ()()())

(define-multi-ifield
  (name f-d-6)
  (comment "register 6bit dest")
  (subfields f-dst-hi f-dst-lo)
  (insert (sequence ()
		    (set (ifield f-dst-lo)
		    	 (and (ifield f-d-6)
			      #xf))
		    (set (ifield f-dst-hi)
		    	 (srl (ifield f-d-6)
			      3))
	)
  )
  (extract
	   (set (ifield f-d-6)
	       (or (sll (ifield f-dst-hi)
	 	   	(const 3))
		   (ifield f-dst-lo))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-dst-hi (c-raw-call SI "findHiR" value))
	  	    	  (set SI f-dst-lo (c-raw-call SI "findLoR" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decode6" value f-dst-lo f-dst-hi))
  )
)
(define-full-operand d6 "6bit dest" (all-aap-isas) h-gpr SI f-d-6 ()()())

(define-multi-ifield
  (name f-a-6)
  (comment "register 6bit src1")
  (subfields f-src-1-hi f-src-1-lo)
  (insert (sequence ()
  	  	    (set (ifield f-src-1-hi)
		    	 (and (srl (ifield f-a-6)
			      	   (const 3))
			      (const #x1f)))
		    (set (ifield f-src-1-lo)
		    	 (and (ifield f-a-6)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-a-6)
	   	(trunc HI
		       (or (sll (ifield f-src-1-hi)
		       	   	(const 3))
			   (ifield f-src-1-lo)))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-src-1-hi (c-raw-call SI "findHiR" value))
	  	    	  (set SI f-src-1-lo (c-raw-call SI "findLoR" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decode6" value f-src-1-lo f-src-1-hi))
  )
)
(define-full-operand a6 "6bit source1" (all-aap-isas) h-gpr SI f-a-6 ()()())

(define-multi-ifield
  (name f-b-6)
  (comment "register 6bit src2")
  (subfields f-src-2-hi f-src-2-lo)
  (insert (sequence ()
  	  	    (set (ifield f-src-2-hi)
		    	 (and (srl (ifield f-b-6)
			      	   (const 3))
			      (const #x1f)))
		    (set (ifield f-src-2-lo)
		    	 (and (ifield f-b-6)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-b-6)
	   	(trunc HI
		       (or (sll (ifield f-src-2-hi)
		       	   	(const 3))
			   (ifield f-src-2-lo)))
	    )
  )
  (encode (value pc)
  	  (sequence SI () (set SI f-src-2-hi (c-raw-call SI "findHiR" value))
	  	    	  (set SI f-src-2-lo (c-raw-call SI "findLoR" value)))

  )
  (decode (value pc)
  	  (set SI value (c-raw-call SI "decode6" value f-src-2-lo f-src-2-hi))
  )
)
(define-full-operand b6 "6bit source2" (all-aap-isas) h-gpr SI f-b-6 ()()())


;;
;; Enum
;;
(define-normal-insn-enum
  length1 "length" () LEN1_ f-length
  (("16" 0)
   ("32" 1))
)
;; f-x-length is always 0
(define-normal-insn-enum
  length2 "x_length" () LEN2_ f-x-length
  (("0" 0)
  ("ERROR" 1))
)

(define-normal-insn-enum
  opcodes1 "opcodes" () OP1_ f-opcode
  (("NOP" 0)
   ("ADD" 1)
   ("SUB" 2)
   ("AND" 3)
   ("OR"  4)
   ("XOR" 5)
   ("ASR" 6)
   ("LSL" 7)
   ("LSR" 8)
   ("MOV" 9)
   ("ADDI" 10)
   ("SUBI" 11)
   ("ASRI" 12)
   ("LSLI" 13)
   ("LSRI" 14)
   ("MOVI" 15)
   ("LDB" 16)
   ("LDW" 20)
   ("LDBPO" 17)
   ("LDWPO" 21)
   ("LDBPR" 18)
   ("LDWPR" 22)
   ("STB" 24)
   ("STW" 28)
   ("STBPO" 25)
   ("STWPO" 29)
   ("STBPR" 26)
   ("STWPR" 30)
   ("BRA" 32)
   ("BAL" 33)
   ("BEQ" 34)
   ("BNE" 35)
   ("BLTS" 36)
   ("BLES" 37)
   ("BLTU" 38)
   ("BLEU" 39)
   ("JMP" 40)
   ("JAL" 41)
   ("JEQ" 42)
   ("JNE" 43)
   ("JLTS" 44)
   ("JLES" 45)
   ("JLTU" 46)
   ("JLEU" 47)
   ("RD" 48))
)

(define-normal-insn-enum
  opcodes2 "opcodes2" () OP2_ f-x-opcode
  (("NOP" 0)
   ("ADD" 1))
)

(define-normal-insn-enum
  opcodes3 "opcodes3" () OP3_ f-class-1
  (("IMM" 1)
   ("NOR" 0))
)

(define-normal-insn-enum
  xclass "xclass" () CLA_ f-x-class
  (("NOP" 0)
   ("ERROR" 1))
)

;;
;; Single Field operands
;;
;; Registers (type: h-gpr)
(define-operand
  (name carry)
  (comment "carry flag operand")
  (type h-cf)
  (index f-carry)
)
(define-operand
  (name xdest)
  (comment "xdest")
  (type h-gpr)
  (index f-x-dst-reg)
)
(define-operand
  (name xsrc1)
  (comment "xsrc1")
  (type h-gpr)
  (index f-x-src-reg-1)
)
(define-operand
  (name xsrc2)
  (comment "xsrc2")
  (type h-gpr)
  (index f-x-src-reg-2)
)
(define-operand
  (name dest1)
  (comment "dest+1")
  (attrs all-aap-isas)
  (type h-gpr)
  (index f-dst+1-reg)
)

;; Numbers unsigned (h-uint)
(define-operand
  (name uint056)
  (comment "uint 5 6")
  (type h-uint)
  (index f-uint-5-6)
  (handlers (parse "move_immi"))
)
(define-operand
  (name i16)
  (comment "uint 16bit")
  (attrs all-aap-isas)
  (type h-uint)
  (index f-i-16)
  (handlers (parse "move_immi32"))
)
(define-operand
  (name uint023)
  (comment "uint 2 3")
  (type h-uint)
  (index f-uint-2-3)
)

;; Numbers signed (h-sint)
(define-operand
  (name int1210)
  (comment "int 12 10")
  (type h-sint)
  (index f-s-10) ;FIX??
)
(define-operand
  (name int083)
  (comment "int 8 3")
  (type h-sint)
  (index f-int-8-3)
  (handlers (parse "branch_cond"))
)
(define-operand
  (name int086)
  (comment "int 8 6")
  (type h-sint)
  (index f-int-8-6)
  (handlers (parse "branch_and_link"))
)
(define-operand
  (name int089)
  (comment "int 8 9")
  (type h-sint)
  (index f-int-8-9)
  (handlers (parse "bra"))
)
(define-operand
  (name int023)
  (comment "int 2 3")
  (type h-sint)
  (index f-int-2-3)
)
(define-operand
  (name s22)
  (comment "s 22")
  (attrs all-aap-isas)
  (type h-sint)
  (index f-s-22)
  (handlers (parse "bra32"))
)
(define-operand
  (name s16)
  (comment "s 16")
  (attrs all-aap-isas)
  (type h-sint)
  (index f-s-16)
  (handlers (parse "branch_and_link32"))
)
(define-operand
  (name s10)
  (comment "s 10")
  (attrs all-aap-isas)
  (type h-sint)
  (index f-s-10-fin)
  (handlers (parse "branch_cond32"))
)

;;
;; Instruction macros
;;
;; Format 1
(define-pmacro (aap-format-1 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic " ${xdest},${xsrc1},${xsrc2}"))
      (format (.splice + LEN1_16 (f-opcode opcode) xdest xsrc1 xsrc2))
      (semantics semantic1 semantic2 (set pc (add pc 1)))
    )
  )
)
;; Format JMP  (rte)
(define-pmacro (aap-format-jmp mnemonic opcode (semantic1))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic " ${xdest}"))
      (format (.splice + LEN2_0 (f-opcode opcode) xdest xsrc1 xsrc2))
      (semantics semantic1 (set xsrc1 0)(set xsrc2 0))
    )
  )
)
;; Format JAL
(define-pmacro (aap-format-jal mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic " ${xdest},${xsrc2}"))
      (format (.splice + LEN2_0 (f-opcode opcode) xdest xsrc1 xsrc2))
      (semantics semantic1 semantic2 (set xsrc1 0))
    )
  )
)
;; Format MOV
(define-pmacro (aap-format-mov mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic " ${xdest},${xsrc1}"))
      (format (.splice + LEN2_0 (f-opcode opcode) xdest xsrc1 xsrc2))
      (semantics semantic1 semantic2 (set xsrc2 0))
    )
  )
)
;; Format 2
(define-pmacro (aap-format-2 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic " ${xdest},${xsrc1},${uint023}"))
      (format (.splice + LEN2_0 (f-opcode opcode) xdest xsrc1 uint023))
      (semantics semantic1 semantic2 (set pc (add pc 1)))
    )
  )
)
;; Format 3
(define-pmacro (aap-format-3 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic " ${int083},${xsrc1},${xsrc2}"))
      (format (.splice + LEN2_0 (f-opcode opcode) int083 xsrc1 xsrc2))
      (semantics (if (semantic xsrc1 xsrc2)
		   (set pc (add pc (ext SI int083)))
		   (set pc (add pc 1))
		   ))
    )
  )
)
;; Format 4
(define-pmacro (aap-format-4 mnemonic opcode (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic))
      (format (.splice + LEN2_0 (f-opcode opcode) xdest xsrc1 int023))
      (semantics semantic1 semantic2 semantic3 (set pc (add pc 1)))
    )
  )
)
;; Format 5
(define-pmacro (aap-format-5 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic " ${xdest},${uint056}"))
      (format (.splice + LEN2_0 (f-opcode opcode) xdest uint056))
      (semantics semantic (set pc (add pc 1)))
    )
  )
)
;; Format 6, BAL
(define-pmacro (aap-format-6 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic " ${int086},${xsrc2}"))
      (format (.splice + LEN2_0 (f-opcode opcode) int086 xsrc2))
      (semantics (set xsrc2 (add pc 1))
                 (set pc (add pc (ext SI int086)))
		 )					;;Rb <- PC + 1, PC <- PC + SignExt(S)
    )
  )
)
;; Format 7, BRA
(define-pmacro (aap-format-7 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-16)
      (syntax (.str mnemonic " ${int089}"))
      (format (.splice + LEN2_0 (f-opcode opcode) int089))
      (semantics (set pc (add pc (ext SI int089))))	 ;;PC <- PC + SignExt(S)
    )
  )
)
;; Format 8
(define-pmacro (aap-format-8 mnemonic opcode0 opcode1 (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${d6},${a6},${b6}"))
      (format (.splice + LEN1_32 (f-opcode opcode0) d6 a6 b6
      	      	       	 LEN2_0 (f-x-opcode opcode1)))
      (semantics semantic1 semantic2 semantic3)
    )
  )
)
;; Format JMP32
(define-pmacro (aap-format-jm32 mnemonic opcode0 opcode1 (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${d6}"))
      (format (.splice + LEN1_32 (f-opcode opcode0) d6 a6 b6
      	      	       	 LEN2_0 (f-x-opcode opcode1)))
      (semantics semantic1 semantic2 semantic3 (set a6 0)(set b6 0))
    )
  )
)
;; Format JAL32
(define-pmacro (aap-format-ja32 mnemonic opcode0 opcode1 (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${d6},${b6}"))
      (format (.splice + LEN1_32 (f-opcode opcode0) d6 a6 b6
      	      	       	 LEN2_0 (f-x-opcode opcode1)))
      (semantics semantic1 semantic2 semantic3 (set a6 0))
    )
  )
)
;; Format MOV32
(define-pmacro (aap-format-mo32 mnemonic opcode0 opcode1 (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${d6},${a6}"))
      (format (.splice + LEN1_32 (f-opcode opcode0) d6 a6 b6
      	      	       	 LEN2_0 (f-x-opcode opcode1)))
      (semantics semantic1 semantic2 semantic3 (set b6 0))
    )
  )
)
;; Format 9
(define-pmacro (aap-format-9 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${d6},${a6},${i6}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 a6 i6
      	      	       	 LEN2_0 OP2_NOP))
      (semantics semantic1 semantic2 (set pc (add pc 2)))
    )
  )
)
;; Format 10
(define-pmacro (aap-format-10 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${d6},${a6},${i9}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 a6 i9
      	      	       	 LEN2_0 OP3_IMM CLA_NOP))
      (semantics (set pc (add pc 2))
		 (set d6 (semantic a6 i9))
		 )
    )
  )
)
;; Format 11
(define-pmacro (aap-format-11 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${d6},${a6},${i10}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 a6 i10
      	      	       	 LEN2_0 CLA_NOP))
      (semantics semantic1 semantic2 (set pc (add pc 2)))
    )
  )
)
;; Format 12
(define-pmacro (aap-format-12 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${s10},${a6},${b6}"))
      (format (.splice + LEN1_32 (f-opcode opcode) s10 a6 b6
      	      	       	 LEN2_0 CLA_NOP))
      (semantics (set pc (add pc 2))
      		 (if (semantic a6 b6)
      		     (set pc (add pc (ext SI s10)))
		 ))
    )
  )
)
;; Format 13
(define-pmacro (aap-format-13 mnemonic opcode (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 a6 i10
      	      	       	 LEN2_0 CLA_NOP))
      (semantics semantic1 semantic2 semantic3 (set pc (add pc 2)))
    )
  )
)
;; Format 14
(define-pmacro (aap-format-14 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${d6},${i12}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 i12
      	      	       	 LEN2_0 OP2_NOP))
      (semantics (if (le i12 4)
      		     (set d6 (c-call USI "@cpu@_nop_insn" i12 d6))
		 ))
    )
  )
)
;; Format 15, MOVI
(define-pmacro (aap-format-15 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${d6},${i16}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 i16
      	      	       	 LEN2_0 CLA_NOP))
      (semantics (set d6 i16) (set pc (add pc 2)))	 ;;Rd <- I, PC <- PC + 2
    )
  )
)
;; Format 16, BAL
(define-pmacro (aap-format-16 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${s16},${b6}"))
      (format (.splice + LEN1_32 (f-opcode opcode) s16 b6 ;; 19, 1
      	      	       	 LEN2_0 CLA_NOP))
      (semantics (set b6 (add pc 2))
                 (set pc (add pc (ext SI s16)))
		 )					;;Rb <- PC + 2, PC <- PC + SignExt(S)
    )
  )
)
;; Format 17, BRA
(define-pmacro (aap-format-17 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs ISA-32)
      (syntax (.str mnemonic " ${s22}"))
      (format (.splice + LEN1_32 (f-opcode opcode) s22
      	      	       	 LEN2_0 CLA_NOP))
      (semantics(set pc (add pc (ext SI s22))))	 ;;PC <- PC + SignExt(S)
    )
  )
)


;;
;; Instructions
;;
;; Format 1
(aap-format-1 "add" OP1_ADD (set xdest (add xsrc1 xsrc2))
	      	      	      (set carry (ge (add xsrc1 xsrc2) 0x10000)))
(aap-format-1 "sub" OP1_SUB (set xdest (sub xsrc1 xsrc2))(set carry (lt xsrc1 xsrc2)))

(aap-format-1 "and" OP1_AND (set xdest (and xsrc1 xsrc2))(nop))

(aap-format-1 "or"  OP1_OR (set xdest (or xsrc1 xsrc2))(nop))

(aap-format-1 "xor" OP1_XOR (set xdest (xor xsrc1 xsrc2))(nop))

(aap-format-1 "asr" OP1_ASR (set xdest (srl (or xsrc1 (sll SI carry 16)) xsrc2))(set carry 0))

(aap-format-1 "lsl" OP1_LSL (set xdest (sll xsrc1 xsrc2))(nop))

(aap-format-1 "lsr" OP1_LSR (set xdest (srl xsrc1 xsrc2))(nop))

(aap-format-mov "mov" OP1_MOV (set xdest xsrc1)(set pc (add pc 1)))

(aap-format-jmp "jmp" OP1_JMP (set pc xdest)) ;;pc + 1 in format 1
	      
(aap-format-jal "jal" OP1_JAL (set xsrc2 (add pc 1))(set pc xdest))

(aap-format-1 "jeq" OP1_JEQ (if (eq xsrc1 xsrc2)
	      	      	      	  (set pc xdest)
	      	      	      	  (set pc (add pc 1)))
			      (set pc (sub pc 1)))
			      
(aap-format-1 "jne" OP1_JNE (if (ne xsrc1 xsrc2) (set pc xdest)
	      	      	      	      	    	   (set pc (add pc 1)))
			      (set pc (sub pc 1)))
						   
(aap-format-1 "jlts" OP1_JLTS (if (lt xsrc1 xsrc2) (set pc xdest)
	      	       		    	      	     (set pc (add pc 1)))
				(set pc (sub pc 1)))
						     
(aap-format-1 "jles" OP1_JLES (if (le xsrc1 xsrc2) (set pc xdest)
	      	       		    	      	     (set pc (add pc 1)))
				(set pc (sub pc 1)))
	      
(aap-format-1 "jltu" OP1_JLTU (if (lt xsrc1 xsrc2) (set pc xdest)  ;;FIX ME:lt->ltu (causes LTUUSI)
	      	       		    	       	      (set pc (add pc 1)))
				(set pc (sub pc 1)))

(aap-format-1 "jleu" OP1_JLEU (if (le xsrc1 xsrc2) (set pc xdest)  ;;FIX ME:le->leu (causes LEUUSI)
	      	       		    	       	      (set pc (add pc 1)))
				(set pc (sub pc 1)))

(aap-format-jmp "rte"  OP1_RD (set pc xdest))

;; Format 2
(aap-format-2 "addi" OP1_ADDI (set xdest (add xsrc1 uint023))
	      	       		(set carry (ge (add xsrc1 uint023) 0x10000)))

(aap-format-2 "subi" OP1_SUBI (set xdest (sub xsrc1 uint023))(set carry (gt xsrc1 uint023)))

(aap-format-2 "asri" OP1_ASRI (set xdest (srl (or xsrc1 (sll SI carry 16)) uint023))(set carry 0))

(aap-format-2 "lsli" OP1_LSLI (set xdest (sll xsrc1 xsrc2))(nop))

(aap-format-2 "lsri" OP1_LSRI (set xdest (srl xsrc1 xsrc2))(nop))

;; Format 3
(aap-format-3 "beq" OP1_BEQ eq)
(aap-format-3 "bne" OP1_BNE ne)
(aap-format-3 "blts" OP1_BLTS lt)
(aap-format-3 "bles" OP1_BLES le)
(aap-format-3 "bltu" OP1_BLTU lt)   ;;FIX ME:lt->ltu (causes LTUUSI)
(aap-format-3 "bleu" OP1_BLEU le)   ;;FIX ME:le->leu (causes LEUUSI)

;; Format 4
(aap-format-4 "ldb ${xdest},[${xsrc1},${int023}]" OP1_LDB (set xdest
	      	      	      (mem QI
			      	   (add xsrc1 (ext SI int023))))
				(nop)(nop))
				
(aap-format-4 "ldw ${xdest},[${xsrc1},${int023}]" OP1_LDW (set xdest
	      	      	      (or
				(mem QI
			      	  (addc xsrc1 (ext SI int023) 1))
			      	(sll (mem QI
			      	  (add xsrc1 (ext SI int023))) 8)))
				(nop)(nop))

(aap-format-4 "ldb ${xdest},[${xsrc1}+,${int023}]" OP1_LDBPO (set xdest
	      			    (mem QI (add xsrc1 (ext SI int023))))
				  (set xsrc1
				    (add xsrc1 (ext SI int023)))
				  (nop))

(aap-format-4 "ldw ${xdest},[${xsrc1}+,${int023}]" OP1_LDWPO (set xdest
	      			    (or
				      (mem QI (addc xsrc1 (ext SI int023) 1))
				      (sll (mem QI (add xsrc1 (ext SI int023))) 8)))
				  (set xsrc1
				    (add xsrc1 (ext SI int023)))
				  (nop))

(aap-format-4 "ldb ${xdest},[-${xsrc1},${int023}]" OP1_LDBPR (set xsrc1
	      			    (sub xsrc1 (ext SI int023)))
				  (set xdest (ext DI (mem QI xsrc1)))
				  (nop))

(aap-format-4 "ldw ${xdest},[-${xsrc1},${int023}]" OP1_LDWPR (set xsrc1
	      			    (sub xsrc1 (ext SI int023)))
				  (set xdest
				    (or (ext DI (mem QI xsrc1))
				    (sll (ext DI (mem QI (add xsrc1 1))) 8)))
				  (nop))

(aap-format-4 "stb [${xdest},${int023}],${xsrc1}" OP1_STB (set
	      	     				    	    (mem QI (add xdest (ext SI int023)))
	      	      	   				    (and xsrc1 255))
			      				    (nop)(nop))
			      
(aap-format-4 "stw [${xdest},${int023}],${xsrc1}" OP1_STW (set (mem QI (add xdest (ext SI int023)))
	      	      	        (and xsrc1 255))
			      (set (mem QI (addc xdest (ext SI int023) 1))
	      	      	        (srl xsrc1 8))
			      (nop))

(aap-format-4 "stb [${xdest}+,${int023}],${xsrc1}" OP1_STBPO (set (mem QI (add xdest (ext SI int023)))
	      	      	            (and xsrc1 255))
				  (set d6 (add d6 (ext SI int023)))
				  (nop))

(aap-format-4 "stw [${xdest}+,${int023}],${xsrc1}" OP1_STWPO (set (mem QI (add xdest (ext SI int023)))
	      	      	            (and xsrc1 255))
			          (set (mem QI (addc xdest (ext SI int023) 1))
	      	      	            (srl xsrc1 8))
			  	  (set d6 (add d6 (ext SI int023))))

(aap-format-4 "stb [-${xdest},${int023}],${xsrc1}" OP1_STBPR (set d6 (sub d6 (ext SI int023)))
	      			  (set (mem QI (add xdest))
	      	      	            (and xsrc1 255))
				  (nop))

(aap-format-4 "stw [-${xdest},${int023}],${xsrc1}" OP1_STWPR (set d6 (sub d6 (ext SI int023)))
	      			  (set (mem QI (add xdest))
	      	      	            (and xsrc1 255))
				  (set (mem QI (add xdest 1))
	      	      	            (srl xsrc1 8)))

;; Format 5
(aap-format-5 "nop" OP1_NOP (nop))
	      	    ;;0: breakpoint, 1: do nothing, 2: exit, 3: stdout, 4: stderr
(aap-format-5 "movi" OP1_MOVI (set xdest uint056))	;;Rd = I, PC++

;; Format 6
(aap-format-6 "bal" OP1_BAL)

;; Format 7
(aap-format-7 "bra" OP1_BRA)

;; Format 8
(aap-format-8 "add" OP1_ADD OP2_NOP (set d6 (add a6 b6))
	      			    (set carry (ge (add a6 b6) (const 65536)))
				    (set pc (add pc 2)))
					
(aap-format-8 "sub" OP1_SUB OP2_NOP (set d6 (sub a6 b6))
	      			    (set carry (gt a6 b6))
				    (set pc (add pc 2)))
					
(aap-format-8 "and" OP1_AND OP2_NOP (set d6 (and a6 b6))
	      			    (set pc (add pc 2))
				    (nop))
					
(aap-format-8 "or"  OP1_OR  OP2_NOP (set d6 (or a6 b6))
	      			    (set pc (add pc 2))
				    (nop))

(aap-format-8 "xor" OP1_XOR OP2_NOP (set d6 (xor a6 b6))
	      			    (set pc (add pc 2))
				    (nop))

(aap-format-8 "asr" OP1_ASR OP2_NOP (set d6 (srl (or a6 (sll SI carry 16)) b6))
	      			    (set carry 0)
				    (set pc (add pc 2)))
					
(aap-format-8 "lsl" OP1_LSL OP2_NOP (set d6 (sll a6 b6))
	      	    	    	    (set pc (add pc 2))
				    (nop))

(aap-format-8 "lsr" OP1_LSR OP2_NOP (set d6 (srl a6 b6))
	      	    	    	    (set pc (add pc 2))
				    (nop))

(aap-format-mo32 "mov" OP1_MOV OP2_NOP (set d6 a6)(
		       	       	       set pc (add pc 2))
				       (nop))

(aap-format-8 "addc" OP1_ADD OP2_ADD (set d6 (addc a6 b6 carry))
	      		 	     (set carry (ge (addc a6 b6 carry) 0x10000))
				     (set pc (add pc 2)))

(aap-format-8 "subc" OP1_SUB OP2_ADD (set d6 (subc a6 b6 carry))
	      		 	 	 (set carry (gt (add b6 carry) a6))
					 (set pc (add pc 2)))
					 
(aap-format-jm32 "jmp" OP1_JMP OP2_NOP (set pc d6)(nop)(nop))

(aap-format-ja32 "jal" OP1_JAL OP2_NOP (set b6 (add pc 2))(set pc d6)(nop))

(aap-format-8 "jeq" OP1_JEQ OP2_NOP (if (eq a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "jne" OP1_JNE OP2_NOP (if (ne a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "jlts" OP1_JLTS OP2_NOP (if (lt a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "jles" OP1_JLES OP2_NOP (if (le a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "jltu" OP1_JLTU OP2_NOP (if (ltu a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "jleu" OP1_JLEU OP2_NOP (if (leu a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-jm32 "jmpl" OP1_JMP OP2_ADD (set dest1 (add d6 1))(set pc (or (sll dest1 16) d6))(nop))

(aap-format-ja32 "jall" OP1_JAL OP2_ADD (set b6 (add pc 2))
	      		 	 	 (set dest1 (add d6 1))
					 (set pc (or (sll dest1 16) d6)))

(aap-format-8 "jeql" OP1_JEQ OP2_ADD (set dest1 (add d6 1))
	      		 	 	 (if (eq a6 b6) (set pc (or (sll dest1 16) d6))
					     	    	(set pc (add pc 2)))(nop))

(aap-format-8 "jnel" OP1_JNE OP2_ADD (set dest1 (add d6 1))
	      		 	 	 (if (ne a6 b6) (set pc (or (sll dest1 16) d6))
					     	    	(set pc (add pc 2)))(nop))

(aap-format-8 "jltsl" OP1_JLTS OP2_ADD (set dest1 (add d6 1))
	      		  	   	   (if (lt a6 b6) (set pc (or (sll dest1 16) d6))
					       	      	  (set pc (add pc 2)))(nop))

(aap-format-8 "jlesl" OP1_JLES OP2_ADD (set dest1 (add d6 1))
	      		  	   	   (if (le a6 b6) (set pc (or (sll dest1 16) d6))
					       	      	  (set pc (add pc 2)))(nop))

(aap-format-8 "jltul" OP1_JLTU OP2_ADD (set dest1 (add d6 1))
	      		  	   	   (if (ltu a6 b6) (set pc (or (sll dest1 16) d6))
					       	       	   (set pc (add pc 2)))(nop))
							   
(aap-format-8 "jleul" OP1_JLEU OP2_ADD (set dest1 (add d6 1))
	      		  	   	   (if (leu a6 b6) (set pc (or (sll dest1 16) d6))
					       	       	   (set pc (add pc 2)))(nop))

;; Format 9
(aap-format-9 "asri" OP1_ASRI (set d6 (srl (or a6 (sll SI carry 16)) i6))(set carry 0))
(aap-format-9 "lsli" OP1_LSLI (set d6 (sll a6 i6))(nop))
(aap-format-9 "lsri" OP1_LSRI (set d6 (srl a6 i6))(nop))

;; Format 10
(aap-format-10 "andi" OP1_AND and)
(aap-format-10 "ori"  OP1_OR or)
(aap-format-10 "xori" OP1_XOR xor)

;; Format 11
(aap-format-11 "addi" OP1_ADDI (set d6 (add a6 i10))(set carry (ge (add a6 i10) 0x10000)))
(aap-format-11 "subi" OP1_SUBI (set d6 (sub a6 i10))(set carry (gt i10 a6)))

;; Format 12
(aap-format-12 "beq" OP1_BEQ eq)
(aap-format-12 "bne" OP1_BNE ne)
(aap-format-12 "blts" OP1_BLTS lt)
(aap-format-12 "bles" OP1_BLES le)
(aap-format-12 "bltu" OP1_BLTU ltu)
(aap-format-12 "bleu" OP1_BLEU leu)

;; Format 13
(aap-format-13 "ldb ${d6},[${a6},${i10}]" OP1_LDB (set d6
	       		 	   (mem QI(add a6 (ext SI i10))))
				 (nop)(nop))

(aap-format-13 "ldw ${d6},[${a6},${i10}]" OP1_LDW (set d6
	       		 	   (or
				     (mem QI(add a6 (ext SI i10)))
				     (sll (mem QI (addc a6 (ext SI i10) 1)) 8)
				   )
				 )
	       		 	 (nop)(nop))

(aap-format-13 "ldb ${d6},[${a6}+,${i10}]" OP1_LDBPO (set d6
	       		 	       (mem QI(add a6 (ext SI i10))))
				     (set a6 (add a6 (ext SI i10)))
	       		   	     (nop))

(aap-format-13 "ldw ${d6},[${a6}+,${i10}]" OP1_LDWPO (set d6
	       		 	       (or
				         (mem QI(add a6 (ext SI i10)))
			    	         (sll (mem QI (addc a6 (ext SI i10) 1)) 8)
				       )
				     )
				     (set a6
				       (add a6 (ext SI i10)))
	       		   	     (nop))

(aap-format-13 "ldb ${d6},[-${a6},${i10}]" OP1_LDBPR (set a6
	       		   	       (sub a6 (ext SI i10)))
	       		   	     (set d6
				       (mem QI(a6)))
	       		   	     (nop))

(aap-format-13 "ldw ${d6},[-${a6},${i10}]" OP1_LDWPR (set a6
	       		   	       (add a6 (ext SI i10)))
	       		   	     (set d6
				       (or
				         (mem QI (a6))
					 (sll (mem QI(add a6 1)) 8)))
	       		   	     (nop))

(aap-format-13 "stb [${d6},${i10}],${a6}" OP1_STB (set (mem QI (add d6 (ext SI i10)))
	       		 	   (and a6 255))
	       		 	 (nop)
				 (nop))

(aap-format-13 "stw [${d6},${i10}],${a6}" OP1_STW (set (mem QI (add d6 (ext SI i10)))
	       		 	   (and a6 255))
	       		 	 (set (mem QI (addc d6 (ext SI i10) 1))
				      (srl a6 8))
				 (nop))

(aap-format-13 "stb [${d6}+,${i10}],${a6}" OP1_STBPO (set (mem QI (add d6 (ext SI i10)))
	       		 	       (and a6 255))
	       		   	     (set d6
				       (add d6 (ext SI i10)))
				     (nop))

(aap-format-13 "stw [${d6}+,${i10}],${a6}" OP1_STWPO (set (mem QI (add d6 (ext SI i10)))
	       		   	       (and a6 255))
	       		 	     (set (mem QI (addc d6 (ext SI i10) 1))
	       		 	       (srl a6 8))
				     (set d6
				       (add d6 (ext SI i10))))

(aap-format-13 "stb [-${d6},${i10}],${a6}" OP1_STBPR (set d6
				       (sub d6 (ext SI i10)))
	       		   	     (set (mem QI (add d6 (ext SI i10)))
	       		 	       (and a6 255))
				     (nop))

(aap-format-13 "stw [-${d6},${i10}],${a6}" OP1_STWPR (set d6
				       (sub d6 (ext SI i10)))
	       		   	     (set (mem QI (add d6 (ext SI i10)))
	       		 	       (and a6 255))
				     (set d6
				       (or
				         (mem QI (a6))
					 (srl (mem QI(add a6 1)) 8))))

;; Format 14
(aap-format-14 "nop" OP1_NOP)

;; Format 15
(aap-format-15 "movi" OP1_MOVI)

;; Format 16
(aap-format-16 "bal" OP1_BAL)

;; Format 17
(aap-format-17 "bra" OP1_BRA)
