;; AAP cpu thing: need to tell cgen the registers and ISA
;;
;; -*- Scheme -*-
;;

(include "simplify.inc")

;;
;; define-architure must appear first
;;
(define-arch
  (name aap)		;; name of cpu architecture
  (comment "AAP")
  (default-alignment aligned)
  (insn-lsb0? #t)	;; is bit 0 the msb or lsb? It is lsb true.
  (machs aap16 aap32)	;; list of machines
  (isas aap)  		;; isa name
)

(define-isa	;;fetches 1 insn at a time & does not execute in parallel. 
  (name aap)
  (default-insn-word-bitsize 32)
  (default-insn-bitsize 32)
  (base-insn-bitsize 32)
  (decode-assist (31 30 29 28 27 26))
)

;;
;; Cpu family definitions.
;;
;; 32 bit
(define-cpu
  ;; cpu names must be distinct from the architecture name and machine names.
  ;; The "b" suffix stands for "base" and is the convention.
  ;; The "f" suffix stands for "family" and is the convention.
  (name aapbf)
  (comment "AAP 32 bit base family")
  (endian little)
  (word-bitsize 32)
)
;; 16 bit
(define-cpu
  ;; cpu names must be distinct from the architecture name and machine names.
  ;; The "b" suffix stands for "base" and is the convention.
  ;; The "f" suffix stands for "family" and is the convention.
  (name aap16bf)
  (comment "AAP 16 bit base family")
  (endian little)
  (word-bitsize 32)
)

;;
;; Machines
;;
;; 32 bit AAP machine
(define-mach	;;bfd name = bfd-aap
  (name aap32)
  (comment "32 bit AAP machine")
  (cpu aapbf)
  (isas aap)
)
;; 16 bit mach
(define-mach	;;bfd name = bfd-aap
  (name aap16)
  (comment "16 bit AAP machine")
  (cpu aap16bf)
  (isas aap)
)

;;
;; Models
;;
;; 32 bit
(define-model
  (name aap32)
  (comment "32 bit AAP model")
  (mach aap32)
  
  (unit u-exec "Execution Unit" ()
    1 1 ;; issue done
    () ;; state
    () ;; inputs
    () ;; outputs
    () ;; profile action (default)
    )
)
;; 16 bit
(define-model
  (name aap16)
  (comment "16 bit AAP model")
  (mach aap16)
  
  (unit u-exec "Execution Unit" ()
    1 1 ;; issue done
    () ;; state
    () ;; inputs
    () ;; outputs
    () ;; profile action (default)
    )
)


;;
;; Attributes
;;
(define-pmacro all-aap-isas () (ISA aap))
(define-pmacro MACH-16 (MACH aap16))
(define-pmacro MACH-32 (MACH aap32))

;;
;; General Purpose Registers (copied frv)
;;
;; AAP has between 4 and 64 16bit general purpose registers

(define-keyword
  (name gpr-names)
  (print-name h-gpr)
  (prefix "")
  (values
   (gp    26)(fp    27)(sp    28)(ra    29)(ea    30)(ba    31)
   (gpr0   0)(gpr1   1)(gpr2   2)(gpr3   3)(gpr4   4)(gpr5   5)(gpr6   6)(gpr7   7)
   (gpr8   8)(gpr9   9)(gpr10 10)(gpr11 11)(gpr12 12)(gpr13 13)(gpr14 14)(gpr15 15)
   (gpr16 16)(gpr17 17)(gpr18 18)(gpr19 19)(gpr20 20)(gpr21 21)(gpr22 22)(gpr23 23)
   (gpr24 24)(gpr25 25)(gpr26 26)(gpr27 27)(gpr28 28)(gpr29 29)(gpr30 30)(gpr31 31)
   (gpr32 32)(gpr33 33)(gpr34 34)(gpr35 35)(gpr36 36)(gpr37 37)(gpr38 38)(gpr39 39)
   (gpr40 40)(gpr41 41)(gpr42 42)(gpr43 43)(gpr44 44)(gpr45 45)(gpr46 46)(gpr47 47)
   (gpr48 48)(gpr49 49)(gpr50 50)(gpr51 51)(gpr52 52)(gpr53 53)(gpr54 54)(gpr55 55)
   (gpr56 56)(gpr57 57)(gpr58 58)(gpr59 59)(gpr60 60)(gpr61 61)(gpr62 62)(gpr63 63)
  )
)

(define-hardware
  (name h-gpr)
  (comment "General Purpose Registers")
  (attrs all-aap-isas CACHE-ADDR)
  (type register USI (64))
  (indices extern-keyword gpr-names)
)


;; Control registers  
(define-keyword
  (name cr-names)
  (print-name h-cr)
  (prefix "")
  (values (psw 0)   (cbr 1)   (spi 2)   (spu 3)
	  (bpc 6)   (bbpsw 8) (bbpc 14) (evb 5)
	  (cr0 0)   (cr1 1)   (cr2 2)   (cr3 3)
	  (cr4 4)   (cr5 5)   (cr6 6)   (cr7 7)
	  (cr8 8)   (cr9 9)   (cr10 10) (cr11 11)
	  (cr12 12) (cr13 13) (cr14 14) (cr15 15))
)

(define-hardware
  (name h-cr)
  (comment "control registers")
  (type register UWI (16))
  (indices extern-keyword cr-names)
  (get (index) (c-call UWI "@cpu@_h_cr_get_handler" index))
  (set (index newval) (c-call VOID "@cpu@_h_cr_set_handler" index newval))
) 

;; Can allow special registers and flash
;; No delay slots

;; 32 bit register, top 8 bits is status, rest is PC
(dnh h-cf "carry flag" () (register BI) () () ())
(dnh h-pc "program couner" (PC PROFILE) (pc) () () ())

;;
;; Instruction fields
;;
;; 0 00 0000 000 000 000 0 CC OOOO DDD AAA BBB
;; 0 00 0000 000 000 000 0 CC OOOO DDD AAA III
;; 0 00 0000 000 000 000 0 CC OOOO SSS AAA BBB
;; 0 00 0000 000 000 000 0 CC OOOO DDD AAA SSS
;; 0 00 0000 000 000 000 0 CC OOOO DDD III III
;; 0 00 0000 000 000 000 0 CC OOOO SSS SSS BBB
;; 0 00 0000 000 000 000 0 CC OOOO SSS SSS SSS
;;
;; 1 CC OOOO DDD AAA BBB 0 CC OOOO DDD AAA BBB
;; 1 CC OOOO DDD AAA III 0 CC OOOO DDD AAA III
;; 1 CC OOOO DDD AAA III 0 CC III1 DDD AAA III
;; 1 CC OOOO DDD AAA III 0 CC IIII DDD AAA III
;; 1 CC OOOO SSS AAA BBB 0 CC SSSS SSS AAA BBB

;; 1 CC OOOO DDD AAA SSS 0 CC SSSS DDD AAA SSS
;; 1 CC OOOO DDD III III 0 CC OOOO DDD III III
;; 1 CC OOOO DDD III III 0 CC IIII DDD III III
;; 1 CC OOOO SSS SSS BBB 0 CC SSSS SSS SSS BBB
;; 1 CC OOOO SSS SSS SSS 0 CC SSSS SSS SSS SSS

;;    name        comment                 macro   start length   (mode: UINT)
(dnf f-length "long insn bit (31-16)" (all-aap-isas) 31 1)
(dnf f-x-length "long insn bit (15-0)" (all-aap-isas) 15 1)

(dnf f-x-class "instruction class (15-0)" (all-aap-isas) 14 2)
(dnf f-opcode "instruction opcode & class (31-16)" (all-aap-isas) 30 6)
(dnf f-x-opcode "instruction opcode & class (15-0)" (all-aap-isas) 14 6)

(dnf f-dst-reg "destination register (31-16)" (all-aap-isas) 24 3)
(dnf f-x-dst-reg "destination register (15-0)" (all-aap-isas) 8 3)
(dnf f-src-reg-1 "source 1 register (31-16)" (all-aap-isas) 21 3)
(dnf f-x-src-reg-1 "source 1 register (15-0)" (all-aap-isas) 5 3)
(dnf f-src-reg-2 "source 2 register (31-16)" (all-aap-isas) 18 3)
(dnf f-x-src-reg-2 "source 2 register (15-0)" (all-aap-isas) 2 3)

(df f-uint-18-3 "- -- ---- --- --- iii - -- ---- --- --- ---"
  (all-aap-isas) 18 3 UINT #f #f)
(df f-uint-21-6 "- -- ---- --- iii iii - -- ---- --- --- ---"
  (all-aap-isas) 21 6 UINT #f #f)
(df f-uint-12-4 "- -- ---- --- --- --- - -- iiii --- --- ---"
  (all-aap-isas) 12 4 UINT #f #f)
(df f-uint-iii1 "- -- ---- --- --- --- - -- iii1 --- --- ---"
  (all-aap-isas) 12 4 UINT #f #f)
(df f-uint-2-3 "- -- ---- --- --- --- - -- ---- --- --- iii"
  (all-aap-isas) 2 3 UINT #f #f)
(df f-uint-5-6 "- -- ---- --- --- --- - -- ---- --- iii iii"
  (all-aap-isas) 5 6 UINT #f #f)

(df f-int-18-3 "- -- ---- --- --- sss - -- ---- --- --- ---"
  (all-aap-isas) 18 3 INT #f #f)
(df f-int-24-9 "- -- ---- sss sss sss - -- ---- --- --- ---"
  (all-aap-isas) 24 9 INT #f #f)
(df f-int-24-6 "- -- ---- sss sss --- - -- ---- --- --- ---"
  (all-aap-isas) 24 6 INT #f #f)
(df f-int-24-3 "- -- ---- sss --- --- - -- ---- --- --- ---"
  (all-aap-isas) 24 3 INT #f #f)
(df f-int-12-4 "- -- ---- --- --- --- - -- ssss --- --- ---"
  (all-aap-isas) 12 4 INT #f #f)
(df f-int-2-3 "- -- ---- --- --- --- - -- ---- --- --- sss"
  (all-aap-isas) 2 3 INT #f #f)
(df f-int-8-3 "- -- ---- --- --- --- - -- ---- sss --- ---"
  (all-aap-isas) 8 3 INT #f #f)
(df f-int-8-6 "- -- ---- --- --- --- - -- ---- sss sss ---"
  (all-aap-isas) 8 6 INT #f #f)
(df f-int-8-9 "- -- ---- --- --- --- - -- ---- sss sss sss"
  (all-aap-isas) 8 9 INT #f #f)
(df f-int-12-7 "- -- ---- --- --- --- - -- ssss sss --- ---"
  (all-aap-isas) 12 7 INT #f #f)
(df f-int-12-10 "- -- ---- --- --- --- - -- ssss sss sss ---"
  (all-aap-isas) 12 10 INT #f #f)
(df f-int-12-13 "- -- ---- --- --- --- - -- ssss sss sss sss"
  (all-aap-isas) 12 13 INT #f #f)

;; for reloc testing
(df f-u16 "16 bit unsigned" () 15 16 UINT #f #f)

;; carry flag
(dnf f-carry "carry flag" () 0 1)

;; d+1
(dnf f-dst+1-reg "R(d+1)" (all-aap-isas) 24 6)

;;
;; multi-ifields
;;
(define-multi-ifield
  (name f-s-22)
  (comment "sint 22bit format-17")
  (attrs all-aap-isas)
  (mode INT)
  (subfields f-int-24-9 f-int-12-13)
  (insert (sequence ()
  	  	    (set (ifield f-int-24-9)
		    	 (and (srl (ifield f-s-22)
			      	   (const 13))
			      (const #x1f)))
		    (set (ifield f-int-12-13)
		    	 (and (ifield f-s-22)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-s-22)
	   	(trunc HI
		       (or (sll (ifield f-int-24-9)
		       	   	(const 13))
			   (ifield f-int-12-13)))
	    )
  )
)
(define-multi-ifield
  (name f-s-16)
  (comment "sint 16bit format-16")
  (attrs all-aap-isas)
  (mode INT)
  (subfields f-int-24-6 f-int-12-10)
  (insert (sequence ()
  	  	    (set (ifield f-int-24-6)
		    	 (and (srl (ifield f-s-16)
			      	   (const 10))
			      (const #x1f)))
		    (set (ifield f-int-12-10)
		    	 (and (ifield f-s-16)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-s-16)
	   	(trunc HI
		       (or (sll (ifield f-int-24-6)
		       	   	(const 10))
			   (ifield f-int-12-10)))
	    )
  )
)
(define-multi-ifield
  (name f-s-10)
  (comment "sint 10bit format-12")
  (attrs all-aap-isas)
  (mode INT)
  (subfields f-int-24-3 f-int-12-7)
  (insert (sequence ()
  	  	    (set (ifield f-int-24-3)
		    	 (and (srl (ifield f-s-10)
			      	   (const 7))
			      (const #x1f)))
		    (set (ifield f-int-12-7)
		    	 (and (ifield f-s-10)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-s-10)
	   	(trunc HI
		       (or (sll (ifield f-int-24-3)
		       	   	(const 7))
			   (ifield f-int-12-7)))
	    )
  )
)
(define-multi-ifield
  (name f-i-12)
  (comment "uint 12bit format-14")
  (attrs all-aap-isas)
  (mode UINT)
  (subfields f-uint-5-6 f-uint-21-6)
  (insert (sequence ()
  	  	    (set (ifield f-uint-21-6)
		    	 (and (srl (ifield f-i-12)
			      	   (const 6))
			      (const #x1f)))
		    (set (ifield f-uint-5-6)
		    	 (and (ifield f-i-12)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-12)
	   	(trunc HI
		       (or (sll (ifield f-uint-21-6)
		       	   	(const 6))
			   (ifield f-uint-5-6)))
	    )
  )
)
(define-multi-ifield
  (name f-i-16)
  (comment "uint 16bit format-14")
  (attrs all-aap-isas)
  (mode UINT)
  (subfields f-i-12 f-uint-12-4)
  (insert (sequence ()
  	  	    (set (ifield f-uint-12-4)
		    	 (and (srl (ifield f-i-16)
			      	   (const 4))
			      (const #x1f)))
		    (set (ifield f-i-12)
		    	 (and (ifield f-i-16)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-16)
	   	(trunc HI
		       (or (sll (ifield f-uint-12-4)
		       	   	(const 4))
			   (ifield f-i-12)))
	    )
  )
)
(define-multi-ifield
  (name f-i-6)
  (comment "uint 6bit")
  (attrs all-aap-isas)
  (mode UINT)
  (subfields f-uint-2-3 f-uint-18-3)
  (insert (sequence ()
  	  	    (set (ifield f-uint-18-3)
		    	 (and (srl (ifield f-i-6)
			      	   (const 3))
			      (const #x1f)))
		    (set (ifield f-uint-2-3)
		    	 (and (ifield f-i-6)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-6)
	   	(trunc HI
		       (or (sll (ifield f-uint-18-3)
		       	   	(const 3))
			   (ifield f-uint-2-3)))
	    )
  )
)
(define-multi-ifield
  (name f-i-10)
  (comment "uint 10bit")
  (attrs all-aap-isas)
  (mode UINT)
  (subfields f-i-6 f-uint-12-4)
  (insert (sequence ()
  	  	    (set (ifield f-uint-12-4)
		    	 (and (srl (ifield f-i-10)
			      	   (const 4))
			      (const #x1f)))
		    (set (ifield f-i-6)
		    	 (and (ifield f-i-10)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-10)
	   	(trunc HI
		       (or (sll (ifield f-uint-12-4)
		       	   	(const 4))
			   (ifield f-i-6)))
	    )
  )
)
(define-multi-ifield
  (name f-i-10i)
  (comment "uint 10bit using iii1")
  (attrs all-aap-isas)
  (mode UINT)
  (subfields f-i-6 f-uint-iii1)
  (insert (sequence ()
  	  	    (set (ifield f-uint-iii1)
		    	 (and (srl (ifield f-i-10)
			      	   (const 4))
			      (const #x1f)))
		    (set (ifield f-i-6)
		    	 (and (ifield f-i-10)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-i-10)
	   	(trunc HI
		       (or (sll (ifield f-uint-iii1)
		       	   	(const 4))
			   (ifield f-i-6)))
	    )
  )
)
(define-multi-ifield
  (name f-d-6)
  (comment "register 6bit dest")
  (attrs all-aap-isas)
  (subfields f-dst-reg f-x-dst-reg)
  (insert (sequence ()
  	  	    (set (ifield f-dst-reg)
		    	 (and (srl (ifield f-d-6)
			      	   (const 3))
			      (const #x1f)))
		    (set (ifield f-x-dst-reg)
		    	 (and (ifield f-d-6)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-d-6)
	   	(trunc HI
		       (or (sll (ifield f-dst-reg)
		       	   	(const 3))
			   (ifield f-x-dst-reg)))
	    )
  )
)
(define-multi-ifield
  (name f-a-6)
  (comment "register 6bit src1")
  (attrs all-aap-isas)
  (subfields f-src-reg-1 f-x-src-reg-1)
  (insert (sequence ()
  	  	    (set (ifield f-src-reg-1)
		    	 (and (srl (ifield f-a-6)
			      	   (const 3))
			      (const #x1f)))
		    (set (ifield f-x-src-reg-1)
		    	 (and (ifield f-a-6)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-a-6)
	   	(trunc HI
		       (or (sll (ifield f-src-reg-1)
		       	   	(const 3))
			   (ifield f-x-src-reg-1)))
	    )
  )
)
(define-multi-ifield
  (name f-b-6)
  (comment "register 6bit src2")
  (attrs all-aap-isas)
  (subfields f-src-reg-2 f-x-src-reg-2)
  (insert (sequence ()
  	  	    (set (ifield f-src-reg-2)
		    	 (and (srl (ifield f-b-6)
			      	   (const 3))
			      (const #x1f)))
		    (set (ifield f-x-src-reg-2)
		    	 (and (ifield f-b-6)
			      (const #x7ff)))
	)
  )
  (extract
	   (set (ifield f-b-6)
	   	(trunc HI
		       (or (sll (ifield f-src-reg-2)
		       	   	(const 3))
			   (ifield f-x-src-reg-2)))
	    )
  )
)


;;
;; Enum
;;
(define-normal-insn-enum
  length1 "length" () LEN1_ f-length
  (("16" 0)
   ("32" 1))
)
;; f-x-length is always 0
(define-normal-insn-enum
  length2 "x_length" () LEN2_ f-x-length
  (("0" 0)
  ("ERROR" 1))
)

(define-normal-insn-enum
  opcodes1 "opcodes" () OP1_ f-opcode
  (("NOP" 0)
   ("ADD" 1)
   ("SUB" 2)
   ("AND" 3)
   ("OR"  4)
   ("XOR" 5)
   ("ASR" 6)
   ("LSL" 7)
   ("LSR" 8)
   ("MOV" 9)
   ("ADDI" 10)
   ("SUBI" 11)
   ("ASRI" 12)
   ("LSLI" 13)
   ("LSRI" 14)
   ("MOVI" 15)
   ("LDB" 16)
   ("LDW" 20)
   ("LDBPO" 17)
   ("LDWPO" 21)
   ("LDBPR" 18)
   ("LDWPR" 22)
   ("SDB" 24)
   ("SDW" 28)
   ("SDBPO" 25)
   ("SDWPO" 29)
   ("SDBPR" 26)
   ("SDWPR" 30)
   ("BRA" 32)
   ("BAL" 33)
   ("BEQ" 34)
   ("BNE" 35)
   ("BLTS" 36)
   ("BLES" 37)
   ("BLTU" 38)
   ("BLEU" 39)
   ("JMP" 40)
   ("JAL" 41)
   ("JEQ" 42)
   ("JNE" 43)
   ("JLTS" 44)
   ("JLES" 45)
   ("JLTU" 46)
   ("JLEU" 47)
  )
)

(define-normal-insn-enum
  opcodes2 "opcodes2" () OP2_ f-x-opcode
  (("NOP" 0)
   ("ADD" 1)
   ("SUB" 2)
   ("AND" 3)
   ("OR"  4)
   ("XOR" 5)
   ("ASR" 6)
   ("LSL" 7)
   ("LSR" 8)
   ("MOV" 9)
   ("ADDI" 10)
   ("SUBI" 11)
   ("ASRI" 12)
   ("LSLI" 13)
   ("LSRI" 14)
   ("MOVI" 15)
   ("LDB" 16)
   ("LDW" 20)
   ("LDBPO" 17)
   ("LDWPO" 21)
   ("LDBPR" 18)
   ("LDWPR" 22)
   ("SDB" 24)
   ("SDW" 28)
   ("SDBPO" 25)
   ("SDWPO" 29)
   ("SDBPR" 26)
   ("SDWPR" 30)
   ("BRA" 32)
   ("BAL" 33)
   ("BEQ" 34)
   ("BNE" 35)
   ("BLTS" 36)
   ("BLES" 37)
   ("BLTU" 38)
   ("BLEU" 39)
   ("JMP" 40)
   ("JAL" 41)
   ("JEQ" 42)
   ("JNE" 43)
   ("JLTS" 44)
   ("JLES" 45)
   ("JLTU" 46)
   ("JLEU" 47)
   ("RD" 48)
  )
)

(define-normal-insn-enum
  xclass "xclass" () CLA_ f-x-class
  (("NOP" 0)
   ("ERROR" 1))
)

;;
;; Single Field operands
;;
;; Registers (type: h-gpr)
(define-operand
  (name carry)
  (comment "carry flag operand")
  (type h-cf)
  (index f-carry)
)
(define-operand
  (name xdest)
  (comment "xdest")
  (type h-gpr)
  (index f-x-dst-reg)
)
(define-operand
  (name xsrc1)
  (comment "xsrc1")
  (type h-gpr)
  (index f-x-src-reg-1)
)
(define-operand
  (name xsrc2)
  (comment "xsrc2")
  (type h-gpr)
  (index f-x-src-reg-2)
)
(define-operand
  (name d6)
  (comment "dest 6bit")
  (type h-gpr)
  (index f-d-6)
)
(define-operand
  (name a6)
  (comment "src1 6bit")
  (type h-gpr)
  (index f-a-6)
)
(define-operand
  (name b6)
  (comment "src2 6bit")
  (type h-gpr)
  (index f-b-6)
)
(define-operand
  (name dest1)
  (comment "dest+1")
  (type h-gpr)
  (index f-dst+1-reg)
)

;; Numbers unsigned (h-uint)
(define-operand
  (name uint056)
  (comment "uint 5 6")
  (type h-uint)
  (index f-uint-5-6)
)
(define-operand
  (name uint023)
  (comment "uint 2 3")
  (type h-uint)
  (index f-uint-2-3)
)
(define-operand
  (name ulo16)
  (comment "16 bit unsigned immediate, for #lo()")
  (attrs)
  (type h-uint)
  (index f-u16)
  (handlers (parse "ulo16") (print "lo"))
)
(define-operand
  (name i12)
  (comment "uint 12bit")
  (type h-uint)
  (index f-i-12)
)
(define-operand
  (name i16)
  (comment "uint 16bit")
  (type h-uint)
  (index f-i-16)
)
(define-operand
  (name i6)
  (comment "uint 6bit")
  (type h-uint)
  (index f-i-6)
)
(define-operand
  (name i10)
  (comment "uint 10bit")
  (type h-uint)
  (index f-i-10)
)
(define-operand
  (name i10i)
  (comment "uint 10bit with iii1")
  (type h-uint)
  (index f-i-10i)
)

;; Numbers signed (h-sint)
(define-operand
  (name int1210)
  (comment "int 12 10")
  (type h-sint)
  (index f-int-12-10)
)
(define-operand
  (name int083)
  (comment "int 8 3")
  (type h-sint)
  (index f-int-8-3)
)
(define-operand
  (name int086)
  (comment "int 8 6")
  (type h-sint)
  (index f-int-8-6)
)
(define-operand
  (name int089)
  (comment "int 8 9")
  (type h-sint)
  (index f-int-8-9)
)
(define-operand
  (name int023)
  (comment "int 2 3")
  (type h-sint)
  (index f-int-2-3)
)
(define-operand
  (name s22)
  (comment "s 22")
  (type h-sint)
  (index f-s-22)
)
(define-operand
  (name s16)
  (comment "s 16")
  (type h-sint)
  (index f-s-16)
)
(define-operand
  (name s10)
  (comment "s 10")
  (type h-sint)
  (index f-s-10)
)

;;
;; Instruction macros
;;
;; Format 1
(define-pmacro (aap-format-1 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-16)
      (syntax (.str mnemonic " ${xdest},${xsrc1},${xsrc2}"))
      (format (.splice + LEN2_0 (f-x-opcode opcode) xdest xsrc1 xsrc2))
      (semantics semantic1 semantic2 (set pc (add pc 1)))
    )
  )
)
;; Format 2
(define-pmacro (aap-format-2 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-16)
      (syntax (.str mnemonic " ${xdest},${xsrc1},${uint023}"))
      (format (.splice + LEN2_0 (f-x-opcode opcode) xdest xsrc1 uint023))
      (semantics semantic1 semantic2 (set pc (add pc 1)))
    )
  )
)
;; Format 3
(define-pmacro (aap-format-3 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-16)
      (syntax (.str mnemonic " ${int083},${xsrc1},${xsrc2}"))
      (format (.splice + LEN2_0 (f-x-opcode opcode) int083 xsrc1 xsrc2))
      (semantics (if (semantic xsrc1 xsrc2)
		   (set pc (add pc (ext SI (trunc HI int083))))
		   (set pc (add pc 1))
		   ))
    )
  )
)
;; Format 4
(define-pmacro (aap-format-4 mnemonic opcode (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-16)
      (syntax (.str mnemonic))
      (format (.splice + LEN2_0 (f-x-opcode opcode) xdest xsrc1 int023))
      (semantics semantic1 semantic2 semantic3 (set pc (add pc 1)))
    )
  )
)
;; Format 5
(define-pmacro (aap-format-5 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-16)
      (syntax (.str mnemonic " ${xdest},${uint056}"))
      (format (.splice + LEN2_0 (f-x-opcode opcode) xdest uint056))
      (semantics semantic (set pc (add pc 1)))
    )
  )
)
;; Format 6, BAL
(define-pmacro (aap-format-6 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-16)
      (syntax (.str mnemonic " ${int086},${xsrc2}"))
      (format (.splice + LEN2_0 (f-x-opcode opcode) int086 xsrc2))
      (semantics (set xsrc2 (add pc 1))
                 (set pc (add pc (ext SI (trunc HI int1210))))
		 )					;;Rb <- PC + 1, PC <- PC + SignExt(S)
    )
  )
)
;; Format 7, BRA
(define-pmacro (aap-format-7 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-16)
      (syntax (.str mnemonic " ${int089}"))
      (format (.splice + LEN2_0 (f-x-opcode opcode) int089))
      (semantics (set pc (add pc (ext SI (trunc HI int089)))))	 ;;PC <- PC + SignExt(S)
    )
  )
)
;; Format 8
(define-pmacro (aap-format-8 mnemonic opcode0 opcode1 (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH MACH-32)
      (syntax (.str mnemonic " ${d6},${a6},${b6}"))
      (format (.splice + LEN1_32 (f-opcode opcode0) d6 a6 b6
      	      	       	 LEN2_0 (f-x-opcode opcode1)))
      (semantics semantic1 semantic2 semantic3)
    )
  )
)
;; Format 9
(define-pmacro (aap-format-9 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-32)
      (syntax (.str mnemonic " ${d6},${a6},${i6}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 a6 i6
      	      	       	 LEN2_0 OP2_NOP))
      (semantics semantic1 semantic2 (set pc (add pc 2)))
    )
  )
)
;; Format 10
(define-pmacro (aap-format-10 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-32)
      (syntax (.str mnemonic " ${d6},${a6},${i10i}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 a6 i10i
      	      	       	 LEN2_0 CLA_NOP))
      (semantics semantic (set pc (add pc 2)))
    )
  )
)
;; Format 11
(define-pmacro (aap-format-11 mnemonic opcode (semantic1)(semantic2))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-32)
      (syntax (.str mnemonic " ${d6},${a6},${i10}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 a6 i10
      	      	       	 LEN2_0 CLA_NOP))
      (semantics semantic1 semantic2 (set pc (add pc 2)))
    )
  )
)
;; Format 12
(define-pmacro (aap-format-12 mnemonic opcode (semantic))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-32)
      (syntax (.str mnemonic " ${s10},${a6},${b6}"))
      (format (.splice + LEN1_32 (f-opcode opcode) s10 a6 b6
      	      	       	 LEN2_0 CLA_NOP))
      (semantics (if (semantic a6 b6)
      		 (set pc (add pc (ext SI (trunc HI s10))))
		 (set pc (add pc 2))
		 ))
    )
  )
)
;; Format 13
(define-pmacro (aap-format-13 mnemonic opcode (semantic1)(semantic2)(semantic3))
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-32)
      (syntax (.str mnemonic))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 a6 i10
      	      	       	 LEN2_0 CLA_NOP))
      (semantics semantic1 semantic2 semantic3 (set pc (add pc 2)))
    )
  )
)
;; Format 14
(define-pmacro (aap-format-14 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-32)
      (syntax (.str mnemonic " ${d6},${i12}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 i12
      	      	       	 LEN2_0 OP2_NOP))
      (semantics (nop))
    )
  )
)
;; Format 15, MOV
(define-pmacro (aap-format-15 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-32)
      (syntax (.str mnemonic " ${d6},${i16}"))
      (format (.splice + LEN1_32 (f-opcode opcode) d6 i16
      	      	       	 LEN2_0 CLA_NOP))
      (semantics (set d6 i16) (set pc (add pc 2)))	 ;;Rd <- I, PC <- PC + 2
    )
  )
)
;; Format 16, BAL
(define-pmacro (aap-format-16 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-32)
      (syntax (.str mnemonic " ${s16},${b6}"))
      (format (.splice + LEN1_32 (f-opcode opcode) s16 b6
      	      	       	 LEN2_0 CLA_NOP))
      (semantics (set b6 (add pc 2))
                 (set pc (add pc (ext SI (trunc HI s16))))
		 )					;;Rb <- PC + 2, PC <- PC + SignExt(S)
    )
  )
)
;; Format 17, BRA
(define-pmacro (aap-format-17 mnemonic opcode)
  (begin
    (define-insn
      (name (.sym mnemonic))
      (comment (.str mnemonic))
      (attrs MACH-32)
      (syntax (.str mnemonic " ${s22}"))
      (format (.splice + LEN1_32 (f-opcode opcode) s22
      	      	       	 LEN2_0 CLA_NOP))
      (semantics(set pc (add pc (ext SI (trunc HI s22)))))	 ;;PC <- PC + SignExt(S)
    )
  )
)


;;
;; Instructions
;;
;; Format 1
(aap-format-1 "l.add" OP2_ADD (set xdest (add xsrc1 xsrc2))
	      	      	      (set carry (ge (add xsrc1 xsrc2) 0x10000)))

(aap-format-1 "l.sub" OP2_SUB (set xdest (sub xsrc1 xsrc2))(set carry (lt xsrc1 xsrc2)))

(aap-format-1 "l.and" OP2_AND (set xdest (and xsrc1 xsrc2))(nop))

(aap-format-1 "l.or"  OP2_OR (set xdest (or xsrc1 xsrc2))(nop))

(aap-format-1 "l.xor" OP2_XOR (set xdest (xor xsrc1 xsrc2))(nop))

(aap-format-1 "l.asr" OP2_ASR (set xdest (srl (or xsrc1 (sll carry 16)) xsrc2))(set carry 0))

(aap-format-1 "l.lsl" OP2_LSL (set xdest (sll xsrc1 xsrc2))(nop))

(aap-format-1 "l.lsr" OP2_LSR (set xdest (srl xsrc1 xsrc2))(nop))

(aap-format-1 "l.mov" OP2_MOV (set xdest xsrc1)(nop))

(aap-format-1 "l.jmp" OP2_JMP (set pc xdest)(sub pc 1)) ;;pc + 1 in format 1
	      
(aap-format-1 "l.jal" OP2_JAL (set xsrc2 (add pc 1))(set pc (sub xdest 1)))

(aap-format-1 "l.jeq" OP2_JEQ (if (eq xsrc1 xsrc2)
	      	      	      	  (set pc xdest)
	      	      	      	  (set pc (add pc 1)))
			      (set pc (sub pc 1)))
			      
(aap-format-1 "l.jne" OP2_JNE (if (ne xsrc1 xsrc2) (set pc xdest)
	      	      	      	      	    	   (set pc (add pc 1)))
			      (set pc (sub pc 1)))
						   
(aap-format-1 "l.jlts" OP2_JLTS (if (lt xsrc1 xsrc2) (set pc xdest)
	      	       		    	      	     (set pc (add pc 1)))
				(set pc (sub pc 1)))
						     
(aap-format-1 "l.jles" OP2_JLES (if (le xsrc1 xsrc2) (set pc xdest)
	      	       		    	      	     (set pc (add pc 1)))
				(set pc (sub pc 1)))
	      
(aap-format-1 "l.jltu" OP2_JLTU (if (ltu xsrc1 xsrc2) (set pc xdest)
	      	       		    	       	      (set pc (add pc 1)))
				(set pc (sub pc 1)))

(aap-format-1 "l.jleu" OP2_JLEU (if (leu xsrc1 xsrc2) (set pc xdest)
	      	       		    	       	      (set pc (add pc 1)))
				(set pc (sub pc 1)))

(aap-format-1 "l.rte"  OP2_RD (set pc xdest)(set pc (sub pc 1)))

;; Format 2
(aap-format-2 "l.addi" OP2_ADDI (set xdest (add xsrc1 uint023))
	      	       		(set carry (ge (add xsrc1 uint023) 0x10000)))

(aap-format-2 "l.subi" OP2_SUBI (set xdest (sub xsrc1 uint023))(set carry (gt xsrc1 uint023)))

(aap-format-2 "l.asri" OP2_ASRI (set xdest (srl (or xsrc1 (sll carry 16)) uint023))(set carry 0))

(aap-format-2 "l.lsli" OP2_LSLI (set xdest (sll xsrc1 xsrc2))(nop))

(aap-format-2 "l.lsri" OP2_LSRI (set xdest (srl xsrc1 xsrc2))(nop))

;; Format 3
(aap-format-3 "l.beq" OP2_BEQ eq)
(aap-format-3 "l.bne" OP2_BNE ne)
(aap-format-3 "l.blts" OP2_BLTS lt)
(aap-format-3 "l.bles" OP2_BLES le)
(aap-format-3 "l.bltu" OP2_BLTU ltu)
(aap-format-3 "l.bleu" OP2_BLEU leu)

;; Format 4
(aap-format-4 "l.ldb ${xdest},(${xsrc1},${int023})" OP2_LDB (set xdest
	      	      	      (mem QI
			      	   (add xsrc1 (ext SI (trunc HI int023)))))
				(nop)(nop))
				
(aap-format-4 "l.ldw ${xdest},(${xsrc1},${int023})" OP2_LDW (set xdest
	      	      	      (or
				(mem QI
			      	  (addc xsrc1 (ext SI (trunc HI int023)) 1))
			      	(sll (mem QI
			      	  (add xsrc1 (ext SI (trunc HI int023)))) 8)))
				(nop)(nop))

(aap-format-4 "l.ldb ${xdest},(${xsrc1}+,${int023})" OP2_LDBPO (set xdest
	      			    (mem QI (add xsrc1 (ext SI (trunc HI int023)))))
				  (set xsrc1
				    (add xsrc1 (ext SI (trunc HI int023))))
				  (nop))

(aap-format-4 "l.ldw ${xdest},(${xsrc1}+,${int023})" OP2_LDWPO (set xdest
	      			    (or
				      (mem QI (addc xsrc1 (ext SI (trunc HI int023)) 1))
				      (sll (mem QI (add xsrc1 (ext SI (trunc HI int023)))) 8)))
				  (set xsrc1
				    (add xsrc1 (ext SI (trunc HI int023))))
				  (nop))

(aap-format-4 "l.ldb ${xdest},(-${xsrc1},${int023})" OP2_LDBPR (set xsrc1
	      			    (sub xsrc1 (ext SI (trunc HI int023))))
				  (set xdest (ext DI (mem QI xsrc1)))
				  (nop))

(aap-format-4 "l.ldw ${xdest},(-${xsrc1},${int023})" OP2_LDWPR (set xsrc1
	      			    (sub xsrc1 (ext SI (trunc HI int023))))
				  (set xdest
				    (or (ext DI (mem QI xsrc1))
				    (sll (ext DI (mem QI (add xsrc1 1))) 8)))
				  (nop))

(aap-format-4 "l.sdb (${xdest},${int023}),${xsrc1}" OP2_SDB (set
	      	     				    	    (mem QI (add xdest (ext SI
							    	    (trunc HI int023))))
	      	      	   				    (and xsrc1 255))
			      				    (nop)(nop))
			      
(aap-format-4 "l.sdw (${xdest},${int023}),${xsrc1}" OP2_SDW (set (mem QI (add xdest (ext SI (trunc HI int023))))
	      	      	        (and xsrc1 255))
			      (set (mem QI (addc xdest (ext SI (trunc HI int023)) 1))
	      	      	        (srl xsrc1 8))
			      (nop))

(aap-format-4 "l.sdb (${xdest}+,${int023}),${xsrc1}" OP2_SDBPO (set (mem QI (add xdest (ext SI (trunc HI int023))))
	      	      	            (and xsrc1 255))
				  (set d6 (add d6 (ext SI (trunc HI int023))))
				  (nop))

(aap-format-4 "l.sdw (${xdest}+,${int023}),${xsrc1}" OP2_SDWPO (set (mem QI (add xdest (ext SI (trunc HI int023))))
	      	      	            (and xsrc1 255))
			          (set (mem QI (addc xdest (ext SI (trunc HI int023)) 1))
	      	      	            (srl xsrc1 8))
			  	  (set d6 (add d6 (ext SI (trunc HI int023)))))

(aap-format-4 "l.sdb (-${xdest},${int023}),${xsrc1}" OP2_SDBPR (set d6 (sub d6 (ext SI (trunc HI int023))))
	      			  (set (mem QI (add xdest))
	      	      	            (and xsrc1 255))
				  (nop))

(aap-format-4 "l.sdw (-${xdest},${int023}),${xsrc1}" OP2_SDWPR (set d6 (sub d6 (ext SI (trunc HI int023))))
	      			  (set (mem QI (add xdest))
	      	      	            (and xsrc1 255))
				  (set (mem QI (add xdest 1))
	      	      	            (srl xsrc1 8)))

;; Format 5
(aap-format-5 "l.nop" OP2_NOP (nop))	;;PC++
(aap-format-5 "l.movi" OP2_MOVI (set xdest uint056))	;;Rd = I, PC++

;; Format 6
(aap-format-6 "l.bal" OP2_BAL)

;; Format 7
(aap-format-7 "l.bra" OP2_BRA)

;; Format 8
(aap-format-8 "l.add32" OP1_ADD OP2_NOP (set d6 (add a6 b6))
	      				(set carry (ge (add a6 b6) 0x10000))
					(set pc (add pc 2)))
					
(aap-format-8 "l.sub32" OP1_SUB OP2_NOP (set d6 (sub a6 b6))
	      				(set carry (gt a6 b6))
					(set pc (add pc 2)))
					
(aap-format-8 "l.and32" OP1_AND OP2_NOP (set d6 (and a6 b6))
	      				(set pc (add pc 2))
					(nop))
					
(aap-format-8 "l.or32"  OP1_OR  OP2_NOP (set d6 (or a6 b6))
	      				(set pc (add pc 2))
					(nop))

(aap-format-8 "l.xor32" OP1_XOR OP2_NOP (set d6 (xor a6 b6))
	      				(set pc (add pc 2))
					(nop))

(aap-format-8 "l.asr32" OP1_ASR OP2_NOP (set d6 (srl (or a6 (sll carry 16)) b6))
	      				(set carry 0)
					(set pc (add pc 2)))
					
(aap-format-8 "l.lsl32" OP1_LSL OP2_NOP (set d6 (sll a6 b6))(set pc (add pc 2))(nop))

(aap-format-8 "l.lsr32" OP1_LSR OP2_NOP (set d6 (srl a6 b6))(set pc (add pc 2))(nop))

(aap-format-8 "l.mov32" OP1_MOV OP2_NOP (set d6 a6)(set pc (add pc 2))(nop))

(aap-format-8 "l.addc32" OP1_ADD OP2_ADD (set d6 (addc a6 b6 carry))
	      		 	 	 (set carry (ge (addc a6 b6 carry) 0x10000))
					 (set pc (add pc 2)))

(aap-format-8 "l.subc32" OP1_SUB OP2_ADD (set d6 (subc a6 b6 carry))
	      		 	 	 (set carry (gt (add b6 carry) a6))
					 (set pc (add pc 2)))
					 
(aap-format-8 "l.jmp32" OP1_JMP OP2_NOP (set pc d6)(nop)(nop))

(aap-format-8 "l.jal32" OP1_JAL OP2_NOP (set b6 (add pc 2))(set pc d6)(nop))

(aap-format-8 "l.jeq32" OP1_JEQ OP2_NOP (if (eq a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "l.jne32" OP1_JNE OP2_NOP (if (ne a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "l.jlts32" OP1_JLTS OP2_NOP (if (lt a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "l.jles32" OP1_JLES OP2_NOP (if (le a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "l.jltu32" OP1_JLTU OP2_NOP (if (ltu a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "l.jleu32" OP1_JLEU OP2_NOP (if (leu a6 b6)(set pc d6)(set pc (add pc 2)))(nop)(nop))

(aap-format-8 "l.jmpl32" OP1_JMP OP2_ADD (set dest1 (add d6 1))(set pc (or (sll dest1 16) d6))(nop))

(aap-format-8 "l.jall32" OP1_JAL OP2_ADD (set b6 (add pc 2))
	      		 	 	 (set dest1 (add d6 1))
					 (set pc (or (sll dest1 16) d6)))

(aap-format-8 "l.jeql32" OP1_JEQ OP2_ADD (set dest1 (add d6 1))
	      		 	 	 (if (eq a6 b6) (set pc (or (sll dest1 16) d6))
					     	    	(set pc (add pc 2)))(nop))

(aap-format-8 "l.jnel32" OP1_JNE OP2_ADD (set dest1 (add d6 1))
	      		 	 	 (if (ne a6 b6) (set pc (or (sll dest1 16) d6))
					     	    	(set pc (add pc 2)))(nop))

(aap-format-8 "l.jltsl32" OP1_JLTS OP2_ADD (set dest1 (add d6 1))
	      		  	   	   (if (lt a6 b6) (set pc (or (sll dest1 16) d6))
					       	      	  (set pc (add pc 2)))(nop))

(aap-format-8 "l.jlesl32" OP1_JLES OP2_ADD (set dest1 (add d6 1))
	      		  	   	   (if (le a6 b6) (set pc (or (sll dest1 16) d6))
					       	      	  (set pc (add pc 2)))(nop))

(aap-format-8 "l.jltul32" OP1_JLTU OP2_ADD (set dest1 (add d6 1))
	      		  	   	   (if (ltu a6 b6) (set pc (or (sll dest1 16) d6))
					       	       	   (set pc (add pc 2)))(nop))
							   
(aap-format-8 "l.jleul32" OP1_JLEU OP2_ADD (set dest1 (add d6 1))
	      		  	   	   (if (leu a6 b6) (set pc (or (sll dest1 16) d6))
					       	       	   (set pc (add pc 2)))(nop))

;; Format 9
(aap-format-9 "l.asri32" OP1_ASRI (set d6 (srl (or a6 (sll carry 16)) i6))(set carry 0))
(aap-format-9 "l.lsli32" OP1_LSLI (set d6 (sll a6 i6))(nop))
(aap-format-9 "l.lsri32" OP1_LSRI (set d6 (srl a6 i6))(nop))

;; Format 10
;(aap-format-10 "l.andi32" OP1_AND (set d6 (and a6 i10i)))
;(aap-format-10 "l.ori32"  OP1_OR (set d6 (or a6 i10i)))
;(aap-format-10 "l.xori32" OP1_XOR (set d6 (xor a6 i10i)))

;; Format 11
;(aap-format-11 "l.addi32" OP1_ADDI (set d6 (add a6 i10))(set carry (ge (add a6 i10) 0x10000)))
;(aap-format-11 "l.subi32" OP1_SUBI (set d6 (sub a6 i10))(set carry (gt i10 a6)))

;; Format 12
(aap-format-12 "l.beq32" OP1_BEQ eq)
(aap-format-12 "l.bne32" OP1_BNE ne)
(aap-format-12 "l.blts32" OP1_BLTS lt)
(aap-format-12 "l.bles32" OP1_BLES le)
(aap-format-12 "l.bltu32" OP1_BLTU ltu)
(aap-format-12 "l.bleu32" OP1_BLEU leu)

;; Format 13
;(aap-format-13 "l.ldb32 ${d6},(${a6},${i10})" OP1_LDB (set d6
;	       		 	   (mem QI(add a6 (ext SI (trunc HI i10)))))
;				 (nop)(nop))

;(aap-format-13 "l.ldw32 ${d6},(${a6},${i10})" OP1_LDW (set d6
;	       		 	   (or
;				     (mem QI(add a6 (ext SI (trunc HI i10))))
;				     (sll (mem QI (addc a6 (ext SI (trunc HI i10)) 1)) 8)
;				   )
;				 )
;	       		 	 (nop)(nop))

;(aap-format-13 "l.ldb32 ${d6},(${a6}+,${i10})" OP1_LDBPO (set d6
;	       		 	       (mem QI(add a6 (ext SI (trunc HI i10)))))
;				     (set a6 (add a6 (ext SI (trunc HI i10))))
;	       		   	     (nop))

;(aap-format-13 "l.ldw32 ${d6},(${a6}+,${i10})" OP1_LDWPO (set d6
;	       		 	       (or
;				         (mem QI(add a6 (ext SI (trunc HI i10))))
;			    	         (sll (mem QI (addc a6 (ext SI (trunc HI i10)) 1)) 8)
;				       )
;				     )
;				     (set a6
;				       (add a6 (ext SI (trunc HI i10))))
;	       		   	     (nop))

;(aap-format-13 "l.ldb32 ${d6},(-${a6},${i10})" OP1_LDBPR (set a6
;	       		   	       (sub a6 (ext SI (trunc HI i10))))
;	       		   	     (set d6
;				       (mem QI(a6)))
;	       		   	     (nop))

;(aap-format-13 "l.ldw32 ${d6},(-${a6},${i10})" OP1_LDWPR (set a6
;	       		   	       (add a6 (ext SI (trunc HI i10))))
;	       		   	     (set d6
;				       (or
;				         (mem QI (a6))
;					 (sll (mem QI(add a6 1)) 8)))
;	       		   	     (nop))

;(aap-format-13 "l.sdb32 (${d6},${i10}),${a6}" OP1_SDB (set (mem QI (add d6 (ext SI (trunc HI i10))))
;	       		 	   (and a6 255))
;	       		 	 (nop)
;				 (nop))

;(aap-format-13 "l.sdw32 (${d6},${i10}),${a6}" OP1_SDW (set (mem QI (add d6 (ext SI (trunc HI i10))))
;	       		 	   (and a6 255))
;	       		 	 (set (mem QI (addc d6 (ext SI (trunc HI i10)) 1))
;	       		 	   (srl a6 8))
;				 (nop))

;(aap-format-13 "l.sdb32 (${d6}+,${i10}),${a6}" OP1_SDBPO (set (mem QI (add d6 (ext SI (trunc HI i10))))
;	       		 	       (and a6 255))
;	       		   	     (set d6
;				       (add d6 (ext SI (trunc HI i10))))
;				     (nop))

;(aap-format-13 "l.sdw32 (${d6}+,${i10}),${a6}" OP1_SDWPO (set (mem QI (add d6 (ext SI (trunc HI i10))))
;	       		   	       (and a6 255))
;	       		 	     (set (mem QI (addc d6 (ext SI (trunc HI i10)) 1))
;	       		 	       (srl a6 8))
;				     (set d6
;				       (add d6 (ext SI (trunc HI i10)))))

;(aap-format-13 "l.sdb32 (-${d6},${i10}),${a6}" OP1_SDBPR (set d6
;				       (sub d6 (ext SI (trunc HI i10))))
;	       		   	     (set (mem QI (add d6 (ext SI (trunc HI i10))))
;	       		 	       (and a6 255))
;				     (nop))

;(aap-format-13 "l.sdw32 (-${d6},${i10}),${a6}" OP1_SDWPR (set d6
;				       (sub d6 (ext SI (trunc HI i10))))
;	       		   	     (set (mem QI (add d6 (ext SI (trunc HI i10))))
;	       		 	       (and a6 255))
;				     (set d6
;				       (or
;				         (mem QI (a6))
;					 (srl (mem QI(add a6 1)) 8))))

;; Format 14
(aap-format-14 "l.nop32" OP1_NOP)

;; Format 15
;(aap-format-15 "l.movi32" OP1_MOVI)

;; Format 16
(aap-format-16 "l.bal32" OP1_BAL)

;; Format 17
(aap-format-17 "l.bra32" OP1_BRA)
