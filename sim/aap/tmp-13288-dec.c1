/* Simulator instruction decoder for @prefix@.

THIS FILE IS MACHINE GENERATED WITH CGEN.

Copyright 1996-2010 Free Software Foundation, Inc.

This file is part of the GNU simulators.

   This file is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   It is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
   License for more details.

   You should have received a copy of the GNU General Public License along
   with this program; if not, write to the Free Software Foundation, Inc.,
   51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.

*/

#define WANT_CPU @cpu@
#define WANT_CPU_@CPU@

#include "sim-main.h"
#include "sim-assert.h"

/* The instruction descriptor array.
   This is computed at runtime.  Space for it is not malloc'd to save a
   teensy bit of cpu in the decoder.  Moving it to malloc space is trivial
   but won't be done until necessary (we don't currently support the runtime
   addition of instructions nor an SMP machine with different cpus).  */
static IDESC @prefix@_insn_data[@PREFIX@_INSN__MAX];

/* Commas between elements are contained in the macros.
   Some of these are conditionally compiled out.  */

static const struct insn_sem @prefix@_insn_sem[] =
{
  { VIRTUAL_INSN_X_INVALID, @PREFIX@_INSN_X_INVALID, @PREFIX@_SFMT_EMPTY },
  { VIRTUAL_INSN_X_AFTER, @PREFIX@_INSN_X_AFTER, @PREFIX@_SFMT_EMPTY },
  { VIRTUAL_INSN_X_BEFORE, @PREFIX@_INSN_X_BEFORE, @PREFIX@_SFMT_EMPTY },
  { VIRTUAL_INSN_X_CTI_CHAIN, @PREFIX@_INSN_X_CTI_CHAIN, @PREFIX@_SFMT_EMPTY },
  { VIRTUAL_INSN_X_CHAIN, @PREFIX@_INSN_X_CHAIN, @PREFIX@_SFMT_EMPTY },
  { VIRTUAL_INSN_X_BEGIN, @PREFIX@_INSN_X_BEGIN, @PREFIX@_SFMT_EMPTY },
  { @ARCH@_INSN_L_ADD, @PREFIX@_INSN_L_ADD, @PREFIX@_SFMT_L_ADD },
  { @ARCH@_INSN_L_SUB, @PREFIX@_INSN_L_SUB, @PREFIX@_SFMT_L_ADD },
  { @ARCH@_INSN_L_AND, @PREFIX@_INSN_L_AND, @PREFIX@_SFMT_L_ADD },
  { @ARCH@_INSN_L_OR, @PREFIX@_INSN_L_OR, @PREFIX@_SFMT_L_ADD },
  { @ARCH@_INSN_L_XOR, @PREFIX@_INSN_L_XOR, @PREFIX@_SFMT_L_ADD },
  { @ARCH@_INSN_L_ASR, @PREFIX@_INSN_L_ASR, @PREFIX@_SFMT_L_ASR },
  { @ARCH@_INSN_L_LSL, @PREFIX@_INSN_L_LSL, @PREFIX@_SFMT_L_ADD },
  { @ARCH@_INSN_L_LSR, @PREFIX@_INSN_L_LSR, @PREFIX@_SFMT_L_ADD },
  { @ARCH@_INSN_L_MOV, @PREFIX@_INSN_L_MOV, @PREFIX@_SFMT_L_MOV },
  { @ARCH@_INSN_L_JMP, @PREFIX@_INSN_L_JMP, @PREFIX@_SFMT_L_JMP },
  { @ARCH@_INSN_L_JAL, @PREFIX@_INSN_L_JAL, @PREFIX@_SFMT_L_JAL },
  { @ARCH@_INSN_L_JEQ, @PREFIX@_INSN_L_JEQ, @PREFIX@_SFMT_L_JEQ },
  { @ARCH@_INSN_L_JNE, @PREFIX@_INSN_L_JNE, @PREFIX@_SFMT_L_JEQ },
  { @ARCH@_INSN_L_JLTS, @PREFIX@_INSN_L_JLTS, @PREFIX@_SFMT_L_JEQ },
  { @ARCH@_INSN_L_JLES, @PREFIX@_INSN_L_JLES, @PREFIX@_SFMT_L_JEQ },
  { @ARCH@_INSN_L_JLTU, @PREFIX@_INSN_L_JLTU, @PREFIX@_SFMT_L_JEQ },
  { @ARCH@_INSN_L_JLEU, @PREFIX@_INSN_L_JLEU, @PREFIX@_SFMT_L_JEQ },
  { @ARCH@_INSN_L_RTE, @PREFIX@_INSN_L_RTE, @PREFIX@_SFMT_L_JMP },
  { @ARCH@_INSN_L_ADDI, @PREFIX@_INSN_L_ADDI, @PREFIX@_SFMT_L_ADDI },
  { @ARCH@_INSN_L_SUBI, @PREFIX@_INSN_L_SUBI, @PREFIX@_SFMT_L_ADDI },
  { @ARCH@_INSN_L_ASRI, @PREFIX@_INSN_L_ASRI, @PREFIX@_SFMT_L_ASRI },
  { @ARCH@_INSN_L_LSLI, @PREFIX@_INSN_L_LSLI, @PREFIX@_SFMT_L_LSLI },
  { @ARCH@_INSN_L_LSRI, @PREFIX@_INSN_L_LSRI, @PREFIX@_SFMT_L_LSLI },
  { @ARCH@_INSN_L_BEQ, @PREFIX@_INSN_L_BEQ, @PREFIX@_SFMT_L_BEQ },
  { @ARCH@_INSN_L_BNE, @PREFIX@_INSN_L_BNE, @PREFIX@_SFMT_L_BEQ },
  { @ARCH@_INSN_L_BLTS, @PREFIX@_INSN_L_BLTS, @PREFIX@_SFMT_L_BEQ },
  { @ARCH@_INSN_L_BLES, @PREFIX@_INSN_L_BLES, @PREFIX@_SFMT_L_BEQ },
  { @ARCH@_INSN_L_BLTU, @PREFIX@_INSN_L_BLTU, @PREFIX@_SFMT_L_BEQ },
  { @ARCH@_INSN_L_BLEU, @PREFIX@_INSN_L_BLEU, @PREFIX@_SFMT_L_BEQ },
  { @ARCH@_INSN_L_LDB___XDEST_____XSRC1____INT023__, @PREFIX@_INSN_L_LDB___XDEST_____XSRC1____INT023__, @PREFIX@_SFMT_L_LDB___XDEST_____XSRC1____INT023__ },
  { @ARCH@_INSN_L_LDW___XDEST_____XSRC1____INT023__, @PREFIX@_INSN_L_LDW___XDEST_____XSRC1____INT023__, @PREFIX@_SFMT_L_LDW___XDEST_____XSRC1____INT023__ },
  { @ARCH@_INSN_L_LDB___XDEST_____XSRC1_____INT023__, @PREFIX@_INSN_L_LDB___XDEST_____XSRC1_____INT023__, @PREFIX@_SFMT_L_LDB___XDEST_____XSRC1____INT023__ },
  { @ARCH@_INSN_L_LDW___XDEST_____XSRC1_____INT023__, @PREFIX@_INSN_L_LDW___XDEST_____XSRC1_____INT023__, @PREFIX@_SFMT_L_LDW___XDEST_____XSRC1____INT023__ },
  { @ARCH@_INSN_L_LDB___XDEST______XSRC1____INT023__, @PREFIX@_INSN_L_LDB___XDEST______XSRC1____INT023__, @PREFIX@_SFMT_L_LDB___XDEST______XSRC1____INT023__ },
  { @ARCH@_INSN_L_LDW___XDEST______XSRC1____INT023__, @PREFIX@_INSN_L_LDW___XDEST______XSRC1____INT023__, @PREFIX@_SFMT_L_LDB___XDEST______XSRC1____INT023__ },
  { @ARCH@_INSN_L_SDB____XDEST____INT023_____XSRC1_, @PREFIX@_INSN_L_SDB____XDEST____INT023_____XSRC1_, @PREFIX@_SFMT_L_SDB____XDEST____INT023_____XSRC1_ },
  { @ARCH@_INSN_L_SDW____XDEST____INT023_____XSRC1_, @PREFIX@_INSN_L_SDW____XDEST____INT023_____XSRC1_, @PREFIX@_SFMT_L_SDB____XDEST____INT023_____XSRC1_ },
  { @ARCH@_INSN_L_SDB____XDEST_____INT023_____XSRC1_, @PREFIX@_INSN_L_SDB____XDEST_____INT023_____XSRC1_, @PREFIX@_SFMT_L_SDB____XDEST____INT023_____XSRC1_ },
  { @ARCH@_INSN_L_SDW____XDEST_____INT023_____XSRC1_, @PREFIX@_INSN_L_SDW____XDEST_____INT023_____XSRC1_, @PREFIX@_SFMT_L_SDB____XDEST____INT023_____XSRC1_ },
  { @ARCH@_INSN_L_SDB_____XDEST____INT023_____XSRC1_, @PREFIX@_INSN_L_SDB_____XDEST____INT023_____XSRC1_, @PREFIX@_SFMT_L_SDB_____XDEST____INT023_____XSRC1_ },
  { @ARCH@_INSN_L_SDW_____XDEST____INT023_____XSRC1_, @PREFIX@_INSN_L_SDW_____XDEST____INT023_____XSRC1_, @PREFIX@_SFMT_L_SDB_____XDEST____INT023_____XSRC1_ },
  { @ARCH@_INSN_L_NOP, @PREFIX@_INSN_L_NOP, @PREFIX@_SFMT_L_NOP },
  { @ARCH@_INSN_L_MOVI, @PREFIX@_INSN_L_MOVI, @PREFIX@_SFMT_L_MOVI },
  { @ARCH@_INSN_L_BAL, @PREFIX@_INSN_L_BAL, @PREFIX@_SFMT_L_BAL },
  { @ARCH@_INSN_L_BRA, @PREFIX@_INSN_L_BRA, @PREFIX@_SFMT_L_BRA },
  { @ARCH@_INSN_L_ADD32, @PREFIX@_INSN_L_ADD32, @PREFIX@_SFMT_L_ADD32 },
  { @ARCH@_INSN_L_SUB32, @PREFIX@_INSN_L_SUB32, @PREFIX@_SFMT_L_ADD32 },
  { @ARCH@_INSN_L_AND32, @PREFIX@_INSN_L_AND32, @PREFIX@_SFMT_L_ADD32 },
  { @ARCH@_INSN_L_OR32, @PREFIX@_INSN_L_OR32, @PREFIX@_SFMT_L_ADD32 },
  { @ARCH@_INSN_L_XOR32, @PREFIX@_INSN_L_XOR32, @PREFIX@_SFMT_L_ADD32 },
  { @ARCH@_INSN_L_ASR32, @PREFIX@_INSN_L_ASR32, @PREFIX@_SFMT_L_ASR32 },
  { @ARCH@_INSN_L_LSL32, @PREFIX@_INSN_L_LSL32, @PREFIX@_SFMT_L_ADD32 },
  { @ARCH@_INSN_L_LSR32, @PREFIX@_INSN_L_LSR32, @PREFIX@_SFMT_L_ADD32 },
  { @ARCH@_INSN_L_MOV32, @PREFIX@_INSN_L_MOV32, @PREFIX@_SFMT_L_MOV32 },
  { @ARCH@_INSN_L_ADDC32, @PREFIX@_INSN_L_ADDC32, @PREFIX@_SFMT_L_ASR32 },
  { @ARCH@_INSN_L_SUBC32, @PREFIX@_INSN_L_SUBC32, @PREFIX@_SFMT_L_ASR32 },
  { @ARCH@_INSN_L_JMP32, @PREFIX@_INSN_L_JMP32, @PREFIX@_SFMT_L_JMP32 },
  { @ARCH@_INSN_L_JAL32, @PREFIX@_INSN_L_JAL32, @PREFIX@_SFMT_L_JAL32 },
  { @ARCH@_INSN_L_JEQ32, @PREFIX@_INSN_L_JEQ32, @PREFIX@_SFMT_L_JEQ32 },
  { @ARCH@_INSN_L_JNE32, @PREFIX@_INSN_L_JNE32, @PREFIX@_SFMT_L_JEQ32 },
  { @ARCH@_INSN_L_JLTS32, @PREFIX@_INSN_L_JLTS32, @PREFIX@_SFMT_L_JEQ32 },
  { @ARCH@_INSN_L_JLES32, @PREFIX@_INSN_L_JLES32, @PREFIX@_SFMT_L_JEQ32 },
  { @ARCH@_INSN_L_JLTU32, @PREFIX@_INSN_L_JLTU32, @PREFIX@_SFMT_L_JEQ32 },
  { @ARCH@_INSN_L_JLEU32, @PREFIX@_INSN_L_JLEU32, @PREFIX@_SFMT_L_JEQ32 },
  { @ARCH@_INSN_L_JMPL32, @PREFIX@_INSN_L_JMPL32, @PREFIX@_SFMT_L_JMPL32 },
  { @ARCH@_INSN_L_JALL32, @PREFIX@_INSN_L_JALL32, @PREFIX@_SFMT_L_JAL32 },
  { @ARCH@_INSN_L_JEQL32, @PREFIX@_INSN_L_JEQL32, @PREFIX@_SFMT_L_JMPL32 },
  { @ARCH@_INSN_L_JNEL32, @PREFIX@_INSN_L_JNEL32, @PREFIX@_SFMT_L_JMPL32 },
  { @ARCH@_INSN_L_JLTSL32, @PREFIX@_INSN_L_JLTSL32, @PREFIX@_SFMT_L_JMPL32 },
  { @ARCH@_INSN_L_JLESL32, @PREFIX@_INSN_L_JLESL32, @PREFIX@_SFMT_L_JMPL32 },
  { @ARCH@_INSN_L_JLTUL32, @PREFIX@_INSN_L_JLTUL32, @PREFIX@_SFMT_L_JMPL32 },
  { @ARCH@_INSN_L_JLEUL32, @PREFIX@_INSN_L_JLEUL32, @PREFIX@_SFMT_L_JMPL32 },
  { @ARCH@_INSN_L_ASRI32, @PREFIX@_INSN_L_ASRI32, @PREFIX@_SFMT_L_ASRI32 },
  { @ARCH@_INSN_L_LSLI32, @PREFIX@_INSN_L_LSLI32, @PREFIX@_SFMT_L_LSLI32 },
  { @ARCH@_INSN_L_LSRI32, @PREFIX@_INSN_L_LSRI32, @PREFIX@_SFMT_L_LSLI32 },
  { @ARCH@_INSN_L_ANDI32, @PREFIX@_INSN_L_ANDI32, @PREFIX@_SFMT_L_ANDI32 },
  { @ARCH@_INSN_L_ORI32, @PREFIX@_INSN_L_ORI32, @PREFIX@_SFMT_L_ANDI32 },
  { @ARCH@_INSN_L_XORI32, @PREFIX@_INSN_L_XORI32, @PREFIX@_SFMT_L_ANDI32 },
  { @ARCH@_INSN_L_ADDI32, @PREFIX@_INSN_L_ADDI32, @PREFIX@_SFMT_L_ADDI32 },
  { @ARCH@_INSN_L_SUBI32, @PREFIX@_INSN_L_SUBI32, @PREFIX@_SFMT_L_ADDI32 },
  { @ARCH@_INSN_L_BEQ32, @PREFIX@_INSN_L_BEQ32, @PREFIX@_SFMT_L_BEQ32 },
  { @ARCH@_INSN_L_BNE32, @PREFIX@_INSN_L_BNE32, @PREFIX@_SFMT_L_BEQ32 },
  { @ARCH@_INSN_L_BLTS32, @PREFIX@_INSN_L_BLTS32, @PREFIX@_SFMT_L_BEQ32 },
  { @ARCH@_INSN_L_BLES32, @PREFIX@_INSN_L_BLES32, @PREFIX@_SFMT_L_BEQ32 },
  { @ARCH@_INSN_L_BLTU32, @PREFIX@_INSN_L_BLTU32, @PREFIX@_SFMT_L_BEQ32 },
  { @ARCH@_INSN_L_BLEU32, @PREFIX@_INSN_L_BLEU32, @PREFIX@_SFMT_L_BEQ32 },
  { @ARCH@_INSN_L_LDB32___D6_____A6____I10__, @PREFIX@_INSN_L_LDB32___D6_____A6____I10__, @PREFIX@_SFMT_L_LDB32___D6_____A6____I10__ },
  { @ARCH@_INSN_L_LDW32___D6_____A6____I10__, @PREFIX@_INSN_L_LDW32___D6_____A6____I10__, @PREFIX@_SFMT_L_LDW32___D6_____A6____I10__ },
  { @ARCH@_INSN_L_LDB32___D6_____A6_____I10__, @PREFIX@_INSN_L_LDB32___D6_____A6_____I10__, @PREFIX@_SFMT_L_LDB32___D6_____A6____I10__ },
  { @ARCH@_INSN_L_LDW32___D6_____A6_____I10__, @PREFIX@_INSN_L_LDW32___D6_____A6_____I10__, @PREFIX@_SFMT_L_LDW32___D6_____A6____I10__ },
  { @ARCH@_INSN_L_LDB32___D6______A6____I10__, @PREFIX@_INSN_L_LDB32___D6______A6____I10__, @PREFIX@_SFMT_L_LDB32___D6______A6____I10__ },
  { @ARCH@_INSN_L_LDW32___D6______A6____I10__, @PREFIX@_INSN_L_LDW32___D6______A6____I10__, @PREFIX@_SFMT_L_LDB32___D6______A6____I10__ },
  { @ARCH@_INSN_L_SDB32____D6____I10_____A6_, @PREFIX@_INSN_L_SDB32____D6____I10_____A6_, @PREFIX@_SFMT_L_SDB32____D6____I10_____A6_ },
  { @ARCH@_INSN_L_SDW32____D6____I10_____A6_, @PREFIX@_INSN_L_SDW32____D6____I10_____A6_, @PREFIX@_SFMT_L_SDB32____D6____I10_____A6_ },
  { @ARCH@_INSN_L_SDB32____D6_____I10_____A6_, @PREFIX@_INSN_L_SDB32____D6_____I10_____A6_, @PREFIX@_SFMT_L_SDB32____D6____I10_____A6_ },
  { @ARCH@_INSN_L_SDW32____D6_____I10_____A6_, @PREFIX@_INSN_L_SDW32____D6_____I10_____A6_, @PREFIX@_SFMT_L_SDB32____D6____I10_____A6_ },
  { @ARCH@_INSN_L_SDB32_____D6____I10_____A6_, @PREFIX@_INSN_L_SDB32_____D6____I10_____A6_, @PREFIX@_SFMT_L_SDB32_____D6____I10_____A6_ },
  { @ARCH@_INSN_L_SDW32_____D6____I10_____A6_, @PREFIX@_INSN_L_SDW32_____D6____I10_____A6_, @PREFIX@_SFMT_L_SDB32_____D6____I10_____A6_ },
  { @ARCH@_INSN_L_NOP32, @PREFIX@_INSN_L_NOP32, @PREFIX@_SFMT_L_NOP },
  { @ARCH@_INSN_L_MOVI32, @PREFIX@_INSN_L_MOVI32, @PREFIX@_SFMT_L_MOVI32 },
  { @ARCH@_INSN_L_BAL32, @PREFIX@_INSN_L_BAL32, @PREFIX@_SFMT_L_BAL32 },
  { @ARCH@_INSN_L_BRA32, @PREFIX@_INSN_L_BRA32, @PREFIX@_SFMT_L_BRA32 },
};

static const struct insn_sem @prefix@_insn_sem_invalid =
{
  VIRTUAL_INSN_X_INVALID, @PREFIX@_INSN_X_INVALID, @PREFIX@_SFMT_EMPTY
};

/* Initialize an IDESC from the compile-time computable parts.  */

static INLINE void
init_idesc (SIM_CPU *cpu, IDESC *id, const struct insn_sem *t)
{
  const CGEN_INSN *insn_table = CGEN_CPU_INSN_TABLE (CPU_CPU_DESC (cpu))->init_entries;

  id->num = t->index;
  id->sfmt = t->sfmt;
  if ((int) t->type <= 0)
    id->idata = & cgen_virtual_insn_table[- (int) t->type];
  else
    id->idata = & insn_table[t->type];
  id->attrs = CGEN_INSN_ATTRS (id->idata);
  /* Oh my god, a magic number.  */
  id->length = CGEN_INSN_BITSIZE (id->idata) / 8;

#if WITH_PROFILE_MODEL_P
  id->timing = & MODEL_TIMING (CPU_MODEL (cpu)) [t->index];
  {
    SIM_DESC sd = CPU_STATE (cpu);
    SIM_ASSERT (t->index == id->timing->num);
  }
#endif

  /* Semantic pointers are initialized elsewhere.  */
}

/* Initialize the instruction descriptor table.  */

void
@prefix@_init_idesc_table (SIM_CPU *cpu)
{
  IDESC *id,*tabend;
  const struct insn_sem *t,*tend;
  int tabsize = @PREFIX@_INSN__MAX;
  IDESC *table = @prefix@_insn_data;

  memset (table, 0, tabsize * sizeof (IDESC));

  /* First set all entries to the `invalid insn'.  */
  t = & @prefix@_insn_sem_invalid;
  for (id = table, tabend = table + tabsize; id < tabend; ++id)
    init_idesc (cpu, id, t);

  /* Now fill in the values for the chosen cpu.  */
  for (t = @prefix@_insn_sem, tend = t + sizeof (@prefix@_insn_sem) / sizeof (*t);
       t != tend; ++t)
    {
      init_idesc (cpu, & table[t->index], t);
    }

  /* Link the IDESC table into the cpu.  */
  CPU_IDESC (cpu) = table;
}

